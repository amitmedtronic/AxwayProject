/**
 * Action method.
 *
 * @param {object} params - A map of all the parameters passed from the flow.
 * @param {object} options - The additional options provided from the flow
 *	 engine.
 * @param {object} options.pluginConfig - The service configuration for this
 *	 plugin from API Builder config.pluginConfig['api-builder-plugin-pluginName']
 * @param {object} options.logger - The API Builder logger which can be used
 *	 to log messages to the console. When run in unit-tests, the messages are
 *	 not logged.  If you wish to test logging, you will need to create a
 *	 mocked logger (e.g. using `simple-mock`) and override in
 *	 `MockRuntime.loadPlugin`.  For more information about the logger, see:
 *	 https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/project/logging/index.html
 * @param {*} [options.pluginContext] - The data provided by passing the
 *	 context to `sdk.load(file, actions, { pluginContext })` in `getPlugin`
 *	 in `index.js`.
 * @return {Promise<*>} resolves or rejects with the value that the provided code resolves
 *   or rejects with. Rejects with an Error if the code parameter is invalid.
 */
async function Execute(params, { logger }) {
	const { data, code } = params;
	if (typeof code !== 'string') {
		throw new Error(`Invalid code: ${code}`);
	}
	const source = `return (async function() { ${code}\n})();`;
	// eslint-disable-next-line no-new-func
	const fn = new Function('data', 'require', 'logger', source);
	// To be functionally consistent, make 'this' the global object.
	// A number of items are not global - require, export, module, __dirname, __filename.
	// We just care about being able to use require in this function.
	return fn.call(global, data, require, logger);
}

module.exports = {
	Execute
};
