const {
	decode,
	errors: styleErrors
} = require('@axway/api-builder-oas-style');
const { convertToDateObject, shouldConvertToDateObject } = require('./utils');

/**
 * Iterates over the operation's parameters and builds a map of parameter name
 * to value with values from the request `req`.
 * @param {OASOperation} op - The OAS operation.
 * @param {Object} req - The raw HTTP request.
 * @param {Object} options - Extract options.
 * @param {Validator} options.validator - The request validator.
 * @param {SchemaManager} options.schemaManager - The schema manager.
 * @param {Logger} options.logger - The plugin logger.
 * @returns {Object} A map of all parameters (if present).
 */
async function extractParameters(op, req, options) {
	const {
		validator,
		schemaManager,
		logger,
		lowerCaseAllHeaders,
		flattenParams,
		convertDateStringToObject,
		errorOnInvalidRequest
	} = options;
	const converted = {
		query: {},
		headers: {},
		path: {},
		cookies: {}
	};
	if (flattenParams) {
		converted.params = {};
	}
	const errors = [];

	// All parameter names must be unique in OAS 2.0 (TODO: true for 3.x?)
	for (const param of op.parameters) {
		let invalidParam = false;
		logger.trace('checking request for param:', param.name);
		const { propIn, propOut } = getParamRequestPropertyNames(param.in);
		const normalizedName = (propIn === 'headers')
			? param.name.toLowerCase()
			: param.name;
		const paramName = lowerCaseAllHeaders
			? normalizedName
			: param.name;

		const hasParam = req[propIn] && (normalizedName in req[propIn]);
		if (hasParam) {
			let paramValue = req[propIn][normalizedName];
			logger.trace(`request has param "${param.name}":`, paramValue, param);

			if (isOAS2CookieParam(param)) {
				// OAS 2 does not have param.in for cookie, so this needs to be
				// handled specially.  The `cookie-parser` will extract all
				// cookies into the `req.cookies`, but the `value` to be
				// validated is going to be the whole header, "cookie".
				converted.cookies = req.cookies;
			} else {
				try {
					const schema = await schemaManager.dereference(param.schema);
					// combine the param with the full (dereferenced) schema
					const dereferencedParam = {
						...param,
						name: paramName,
						schema
					};
					decode(paramValue, dereferencedParam, converted[propOut]);
				} catch (err) {
					invalidParam = true;
					let msg = err.message;
					if (err instanceof styleErrors.DecodeError) {
						errors.push(err.message);
						msg = `The ${param.in} parameter "${param.name}" failed to parse with style "${param.style}"`;
					}
					logger.debug(msg, err);
					errors.push(msg);
				}
				paramValue = converted[propOut][paramName];
			}
			if (invalidParam) {
				// no need to validate invalid params
				continue;
			}
			logger.trace('validating', propIn, param.name, paramValue);
			const result = validator.validateParam(param, paramValue, {
				logger,
				errorOnInvalidRequest
			});

			if (convertDateStringToObject && shouldConvertToDateObject(param.schema)) {
				converted[propOut][param.name] = convertToDateObject(paramValue);
			}

			if (errorOnInvalidRequest) {
				errors.push(...result.errors);
			}
		} else if (!param.required) {
			logger.trace('request does not have optional param:', param.name);
		} else {
			const message = `Missing required ${param.in} parameter: ${param.name}`;
			errors.push(message);
		}
		if (flattenParams && converted[propOut][paramName] !== undefined) {
			converted.params[param.name] = converted[propOut][paramName];
		}
	}

	logger.trace('converted', converted);
	return {
		converted,
		errors
	};
}

function isOAS2CookieParam(param) {
	return param.in === 'header' && param.name === 'cookie';
}

/**
 * Returns an object of `{ propIn, propOut }` representing names of the
 * properties for each respective case.  The `propIn` is the property name
 * from the express request.  The `propOut` is the property name to which the
 * property should be copied.
 *
 * @param {string} oasIn - The OAS `parameter.in`
 * @returns {Object} An object of `{ propIn, propOut }`
 */
function getParamRequestPropertyNames(oasIn) {
	if (oasIn === 'query') {
		return {
			propIn: 'query',
			propOut: 'query'
		};
	} else if (oasIn === 'header') {
		return {
			propIn: 'headers',
			propOut: 'headers'
		};
	} else if (oasIn === 'cookie') {
		return {
			propIn: 'cookies',
			propOut: 'cookies'
		};
	}
	return {
		propIn: 'params',
		propOut: 'path'
	};
}

module.exports = extractParameters;
