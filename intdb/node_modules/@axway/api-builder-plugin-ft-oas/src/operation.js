const utils = require('./utils');

/**
 * Returns response headers for the operation.
 *
 * @param {OASOperation} op - the operation
 * @returns {string[]} An array of headers related for the `OASOperation`
 */
function getAllResponseHeaders(op) {
	const headers = new Set();
	for (const response of op.responses) {
		const hdrs = response.headers;
		Object.keys(hdrs).forEach(h => headers.add(h));
	}
	return Array.from(headers);
}

/**
 * Generates a map of responses to replace the OAS operation responses array.
 * Contains additional metadata which includes the content-types, if they're JSON-like,
 * and their parsed representations, split into type and parameters.
 * @param {OASOperation} op - the operation
 * @returns {object} map of status codes to responses defined in the operation
 */
function getResponses(op) {
	const responses = {};
	const parsedTypes = {};

	for (const response of op.responses) {
		// Note that res.statusCode can also be 'default' or a wildcard (2XX)
		const contentTypes = Object.keys(response.content || {});

		const contentTypeMetadata = {
			// all contentTypes
			all: [],
			// all JSON-like content-types
			json: [],
			// parsed lookup table of content-types
			parsed: {}
		};

		for (const contentType of contentTypes) {
			// Avoid re-parsing and duplicating the same content-types
			let parsed = parsedTypes[contentType];
			if (!parsed) {
				parsed = utils.parseContentType(contentType);
				parsedTypes[contentType] = parsed;
			}
			if (parsed.json) {
				contentTypeMetadata.json.push(contentType);
			}
			contentTypeMetadata.all.push(contentType);
			contentTypeMetadata.parsed[contentType] = parsed;
		}

		// Assign the response object
		responses[response.statusCode] = {
			...response,
			contentTypeMetadata
		};
	}

	return responses;
}

module.exports = {
	getResponses,
	getAllResponseHeaders
};
