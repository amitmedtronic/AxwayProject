const Ajv = require('ajv');
const draft04schema = require('ajv/lib/refs/json-schema-draft-04.json');
const draft06schema = require('ajv/lib/refs/json-schema-draft-06.json');
const axwaySchema = require('axway-schema');
const addFormats = require('ajv-formats');

class SchemaManager {
	constructor() {
		const ajv = new Ajv({
			unknownFormats: 'ignore', // but will log to console
			schemaId: 'auto'
		});

		// We are adding both drafts 4 and 6 because inline schema is draft 4
		// while referenced schema from components section are converted to
		// draft 6 in api-builder-oas-flow-node. Those draft 6 schemas have
		// $schema property set that helps ajv to know how to validate them.
		ajv.addMetaSchema(draft04schema);
		ajv.addMetaSchema(draft06schema);
		ajv._opts.defaultMeta = draft04schema.id;
		addFormatsToAjv6(ajv);
		this._ajv = ajv;
	}

	set logger(logger) { this._logger = logger; }

	get ajv() {
		return this._ajv;
	}

	addSchemas(specSchemas) {
		for (const schema of specSchemas) {
			const copy = {
				$id: schema.id,
				...schema
			};
			delete copy.id;
			this._ajv.addMetaSchema(copy);
		}
	}

	dereference(schema) {
		const derefdSchema = axwaySchema.dereference(schema);
		this._logger.trace('dereferenced schema', derefdSchema);
		return derefdSchema;
	}
}

function addFormatsToAjv6(ajv) {
	// These are (mostly) OAS formats that are available by default in Ajv.
	// If we update to Ajv 8, then we can use `ajv-formats` as normal like:
	// `addFormats(ajv)`, but because this is Ajv 6, this manually adds the
	// formats we need.  Ajv 6 has all the other formats that we require.
	for (const format of [
		'int32',
		'int64',
		'float',
		'double',
		'uri-reference',
		'byte'
	]) {
		ajv.addFormat(format, addFormats.default.get(format));
	}
	ajv.addFormat('binary', () => true);
	ajv.addFormat('password', () => true);
}

module.exports = SchemaManager;
