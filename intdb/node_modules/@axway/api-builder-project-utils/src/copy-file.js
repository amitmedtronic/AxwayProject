const fs = require('fs');
const path = require('path');
const debug = require('debug');
const { COPYFILE_EXCL } = fs.constants;
const getProjectPath = require('./get-project-path');
const isAPIBuilderProject = require('./is-api-builder-project');

const log = debug('builder:api-builder-project-utils');

const validateInputs = (source, destination) => {
	if (!source) {
		throw new Error('Missing required parameter: source.');
	}
	const sourceType = typeof source;
	if (sourceType !== 'string') {
		throw new Error(`source must be of type string, got: ${sourceType}`);
	}

	if (!destination) {
		throw new Error('Missing required parameter: destination.');
	}
	const destType = typeof destination;
	if (destType !== 'string') {
		throw new Error(`destination must be of type string, got: ${destType}`);
	}
};

/**
 * Copies a file from an npm module into a location within an API Builder
 * project. The `source` should be a relative path to a file from within the
 * npm module. The `destination` should be relative to the API Builder project
 * and can point to a file or a directory. If the `destination` ends with a
 * slash, e.g. `./conf/`, then the destination is regarded as a directory and if
 * the directory does not exist, it is created before writing `source` to the
 * target directory. If `destination` does not end in a slash, then it is
 * regarded as a file and will only copy `source` if the `destination` does not
 * exist (e.g. as a file or directory). If `destination` does not end in a
 * slash, but contains a relative directory, e.g. `./conf/banana.yaml`, then the
 * directories will be recursively created (only on Node.js 10+) before copying
 * the `source` into a file named `banana.yaml`.
 * @async
 * @param {string} source - The path of the file to be copied, relative to the
 * npm module.
 * @param {string} destination - The path of the destination, either a file or
 * a path, relative to the API Builder project.
 * @return {string} The file that was created, or undefined if the file already
 * exists.
 */

const copyFile = async (source, destination) => {
	// Do not copy the files on production installs
	if (process.env.NODE_ENV === 'production') {
		log('Not copying files in production.');
		return;
	}

	validateInputs(source, destination);

	// convert the destination path into OS specific path
	destination = destination.replace(/\//g, path.sep);
	source = source.replace(/\//g, path.sep);
	const currentDir = process.cwd();
	const srcFile = path.resolve(currentDir, source);

	log('Current directory:', currentDir);
	log('Source path:', srcFile);

	// A simple check to see if the file exists.  We're not testing if it's
	// accessible, or if it is a file.  We'll let `fs.copyFileSync` do that.
	if (!fs.existsSync(srcFile)) {
		throw new Error(`File does not exist: ${srcFile}`);
	}

	const projectPath = getProjectPath(require.main);
	log('Project directory:', projectPath);

	// Script should not create a directory when the current path and the
	// project directory the same. (an npm install in the plugin's directory)
	if (currentDir === projectPath) {
		log('The current directory is the same as the project path - no files copied.');
		return;
	}

	// You can only copy to a directory that contains an API Builder project
	if (!await isAPIBuilderProject(projectPath)) {
		return;
	}
	let dstFile = path.resolve(projectPath, destination);
	// If the `dstFile` is a directory, then we need to append the filename
	if (destination.endsWith(path.sep)) {
		log('Destination is a directory');
		dstFile = path.join(dstFile, path.basename(srcFile));
	} else {
		log('Destination is not a directory');
	}

	// If the `dstFile` exists, then return.  If the `dstFile` directory does
	// not exist, then create it.
	log('Destination file:', dstFile);
	if (fs.existsSync(dstFile)) {
		log('Destination file already exists:', dstFile);
		return;
	} else if (!fs.existsSync(path.dirname(dstFile))) {
		// create destination directories
		// Note: this won't be hit if a file exists with the same name as the destination directory.
		// The script will fail when copying the file.
		log('mkdirSync', path.dirname(dstFile));
		// NOTE: { recursive: true } requires Node.js 10 to work. Anything lower will only
		// allow creating the root directory, otherwise it will fail.
		fs.mkdirSync(path.dirname(dstFile), { recursive: true });
	}

	log('copy', srcFile, dstFile);
	fs.copyFileSync(srcFile, dstFile, COPYFILE_EXCL);
	return dstFile;
};

module.exports = copyFile;
