const fs = require('fs');
const path = require('path');
const debug = require('debug');

const log = debug('builder:api-builder-project-utils');

/**
 * Recursively attempts to locate the package root, starting from the directory
 * specified and going up a level, until the package.json is found or there is
 * no more to traverse.
 *
 * @param {string} dir - The directory where it will attempt to locate the
 *   package.json
 * @returns {(string|null)} The project directory or null if one was not found.
 */
const recursivelyFindModuleRoot = (dir) => {
	log('checking', dir, 'for package.json');
	if (fs.existsSync(path.join(dir, 'package.json'))) {
		return dir;
	}
	const basePath = path.resolve(dir, '..');
	if (dir === basePath) {
		return null;
	}
	return recursivelyFindModuleRoot(basePath);
};

/**
 * Attempts to locate the project root by searching a set of paths in sequence
 * for a package.json file.  It will recursively walk each path until a
 * package.json file is found.  For the paths, it uses:
 *
 * * [INIT_CWD](https://docs.npmjs.com/cli/run-script) path;
 * * [require.main] (https://nodejs.org/api/modules.html#modules_require_main)
 *   path (if provided);
 * * [process.cwd](https://nodejs.org/api/process.html#process_process_cwd)
 *
 * @param {object} [requireMain] - The `require.main` to include in the search.
 *
 * @returns {(string|null)} The project path or null if none was found.
 */
const getProjectPath = (requireMain) => {
	const paths = {
		INIT_CWD: process.env.INIT_CWD
	};
	if (requireMain) {
		paths.main = requireMain.paths[0].split('node_modules')[0].slice(0, -1);
	}
	paths.cwd = process.cwd();
	log('paths', paths);

	for (const name in paths) {
		const location = paths[name];
		log('searching:', name, location);

		if (location) {
			const found = recursivelyFindModuleRoot(location);
			if (found) {
				return found;
			}
		}
	}

	return null;
};

module.exports = getProjectPath;
