const fs = require('fs');
const path = require('path');
const debug = require('debug');
const getProjectPath = require('./get-project-path');
const isAPIBuilderProject = require('./is-api-builder-project');

const log = debug('builder:api-builder-project-utils');

const validateInputs = (destination) => {
	if (!destination) {
		throw new Error('Missing required parameter: destination.');
	}
	const destType = typeof destination;
	if (destType !== 'string') {
		throw new Error(`destination must be of type string, got: ${destType}`);
	}
};

/**
 * Creates a directory with all its subdirectories at a given location inside
 * of an API Builder application if they does not exist already.
 *
 * @async
 * @param {string} destination - The destination path where the directory is
 * to be created.
 * @return {string} The directory that was created, or undefined if the
 * directory already exists.
 */
const createDirectoryInProject = async (destination) => {
	// Do not create directories on production installs
	if (process.env.NODE_ENV === 'production') {
		log('Creating directories on production is not allowed.');
		return;
	}

	validateInputs(destination);
	const currentDir = process.cwd();
	const projectPath = getProjectPath(require.main);
	log('Current directory:', currentDir);
	log('Project path:', projectPath);
	// Script should not create a directory when the current path and the
	// project directory the same. (an npm install in the plugin's directory)
	if (currentDir === projectPath) {
		log('The current directory is the same as the project path - directory not created.');
		return;
	}

	// You can copy only to a directory that contains an API Builder project
	await isAPIBuilderProject(projectPath);

	const destPath = path.resolve(projectPath, destination);
	log(`Destination path: ${destPath}`);

	// If the destination directories doesn't exist
	if (!fs.existsSync(destPath)) {
		// Create the directories
		// NOTE: { recursive: true } requires Node.js 10 to work. Anything lower will only
		// allow creating the root directory, otherwise it will fail.
		fs.mkdirSync(destPath, { recursive: true });
		return destPath;
	} else {
		log('Destination directory already exists:', destPath);
		return;
	}
};

module.exports = createDirectoryInProject;
