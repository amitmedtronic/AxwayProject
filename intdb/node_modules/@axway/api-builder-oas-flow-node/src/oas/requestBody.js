const { convertOAS2ParameterToSchema } = require('../utils');

/**
 * Convert an OAS2 body `parameter` to an OAS3 `requestBody` equivalent.
 *
 * Note that only OAS2 body parameters can have a schema, and it is optional.
 * OAS2 can only have one "body" parameter.
 *
 * An example OAS2 body:
 *		```yaml
 * 		name: user
 *		in: body
 *		description: Username
 *		required: true
 *		schema:
 *			type: string
 *		```
 *
 * A converted OAS3 requestBody:
 *		```yaml
 *		requestBody:
 *			required: true
 *			content:
 *				application/json:
 *					schema:
 *						title: user
 *						description: Username
 *						type: string
 *		```
 * @param {object} parameter - Strictly, an OAS2 parameter definition in
 *		"body".  If using sway, it must be `parameter.definition`.
 * @param {string[]} contentTypes - An array of content types that
 *		are defined in OAS2.  It can not be empty since it contains at
 *		least the default one - `application/json`.
 * @param {object} [requestBody] - The `requestBody` object to update.
 *		If one is not provided, one is generated.
 * @return {object} An OAS3 requestBody.
 */
function fromParameter(parameter, contentTypes) {
	const requestBody = { content: {} };
	for (const contentType of contentTypes) {
		// Generate a requestBody for each content-type.  Note it's not
		// necessary to check if the content-type was created already (in
		// the case of duplicate content-types) because the same body will
		// be created each time.  It's inefficient, but unlikely.
		// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#media-type-object
		requestBody.content[contentType] = {
			schema: {
				title: parameter.name,
				...convertOAS2ParameterToSchema(parameter)
			}
		};

		if (parameter.required) {
			requestBody.required = true;
		}
	}
	return requestBody;
}

/**
 * Convert an OAS2 `formData` parameter to an OAS3 `requestBody` equivalent.
 *
 * Only converts one parameter at a time, storing the result in `requestBody`.
 * Pass the output of this method into `requestBody` to build up a full body
 * of all formData parameters.
 *
 * An example OAS2 formData:
 *		```yaml
 * 		name: user
 *		in: formData
 *		description: Username
 *		required: true
 *		type: string
 *		```
 *
 * A converted OAS3 requestBody:
 *		```yaml
 *		requestBody:
 *			required: true
 *			content:
 *				application/x-www-form-urlencoded:
 *					schema:
 *						type: object
 *						properties:
 *							user:
 *								type: string
 *								description: Username
 *		```
 * @param {object} parameter - Strictly, an OAS2 parameter definition
 *		in "formData".  If using sway, it must be `parameter.definition`.
 * @param {string[]} contentTypes - An array of content types that
 *		are defined in OAS2.  It can not be empty since it contains at
 *		least form types by default.
 * @param {object} requestBody - The `requestBody` object to update.
 *		If one is not provided, one is generated.
 * @return {object} An OAS3 requestBody.
 */
function fromForm(parameter, contentTypes, requestBody = { content: {} }) {
	// Get the schema representation of the parameter
	const convertedSchema = convertOAS2ParameterToSchema(parameter);
	for (const contentType of contentTypes) {
		const mediaObject = getMediaObjectInterface(requestBody, contentType);

		// If this is text/plain, then this is not building an object with
		// properties.  The schema is simpler.
		if (contentType.startsWith('text/plain')) {
			mediaObject.setSchema({
				title: parameter.name,
				...convertedSchema
			});
			continue;
		}

		// OAS 2 does not support specifying the content-type for uploaded
		// files.  This is supported in OAS 3 via the encoding-object.  See:
		// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#encoding-object
		// The conversion of 'file' cannot produce a meaningful "encoding"
		// object in requestBody.
		// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#considerations-for-file-uploads
		// OAS2 can only represent a single file upload. The type will be string when converted.

		mediaObject.addProperty(
			parameter.name,
			convertedSchema,
			{
				required: parameter.required
			}
		);

		// This is subtle, but there is no specific way to make a form body
		// required in OAS2.  If all formData parameters were not required,
		// then technically, the body is optional.  So, the conversion is
		// if any formData parameter is required, then the body is required.
		requestBody.description = 'Form body';
		requestBody.required = requestBody.required
			|| parameter.required
			|| false;
	}
	return requestBody;
}

/**
 * Gets an interface to existing or newly created media object (`content`
 * property of requestBody).
 *
 * Media Type Object is described here:
 * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#media-type-object
 *
 * @param {object} requestBody the object to which media type is created
 * @param {string} contentType the content type for which media object is created
 * @return {object} interface to manipulate further media object structure
 */
function getMediaObjectInterface(requestBody, contentType) {
	if (!requestBody.content[contentType]) {
		requestBody.content[contentType] = {
			schema: {
				type: 'object',
				properties: {}
			}
		};
	}
	const mediaObject = requestBody.content[contentType];

	// TODO: support multipart Encoding Object.  Currently documented as not
	// supported.

	function setSchema(schema) {
		mediaObject.schema = schema;
	}

	function addProperty(name, value, { required }) {
		const { schema } = mediaObject;
		schema.properties[name] = value;
		if (required) {
			if (!schema.required) {
				schema.required = [];
			}
			schema.required.push(name);
		}
	}
	return { setSchema, addProperty };
}

/**
 * This interface exports functions that help transforming Swagger 2 parameters
 * into OAS 3 requestBody.  See:
 * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#request-body-object
 */
module.exports = {
	fromParameter,
	fromForm
};
