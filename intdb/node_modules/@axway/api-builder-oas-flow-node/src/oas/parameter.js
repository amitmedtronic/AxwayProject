const { convertOAS2ParameterToSchema, enhanceSchemaDescription } = require('../utils');

// This won't be used for parameters in form or body
class OASParameter {
	constructor(parameter, oasVersion) {
		// Define non-enumerable private props
		Object.defineProperty(this, '_parameter', {
			value: parameter
		});
		Object.defineProperty(this, '_oasVersion', {
			value: oasVersion
		});

		// Public properties
		this._setProperty('name', this._parameter.name);
		this._setProperty('in', this._parameter.in);
		this._setProperty('description', this._parameter.description);
		this._setProperty('required', this._parameter.required || false);
		this._setProperty('schema', this._getSchema());
		if (this.in !== 'body') {
			this._setProperty('style', this._getStyle());
			this._setProperty('explode', this._getExplode());
		}
	}

	_setProperty(name, value) {
		if (value !== undefined) {
			this[name] = value;
		}
	}

	_getSchema() {
		// In OAS 2, the schema bits are applied to the parameter itself but
		// also has an optional `schema` if the parameter is a body.  In OAS3,
		// the parameter has *one* schema bit, and all are applied to an
		// optional `schema`.
		let schema;
		if (this._oasVersion === '2') {
			return convertOAS2ParameterToSchema(
				this._parameter.definition
			);
		} else if (this._parameter.content) {
			// Content and schema are mutually exclusive
			// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#parameterContent
			// !Process the "content" first becuase Sway wrongly creates parameter.schema
			// without type when the actual schema is within the "content"
			// property of the parameter.

			// content MUST only contain one entry
			schema = { ...Object.values(this._parameter.content)[0].schema };
		} else {
			schema = { ...this._parameter.schema };
		}
		enhanceSchemaDescription(this._parameter.description, schema);
		return schema;
	}

	_getStyle() {
		if (this._parameter.style) {
			// OAS3 param with style
			return this._parameter.style;
		}
		if (this._oasVersion === '2') {
			const result = adaptCollectionFormat(this._parameter);
			if (result) {
				return result.style;
			}
		}
		// Defaults based on value of `in` - in OAS 2, the default is 'csv',
		// which is 'form' in OAS 3. In OAS3, the default is based on the
		// parameter 'in'.
		if ([ 'path', 'header' ].includes(this._parameter.in)) {
			return 'simple';
		} else {
			// query, cookie
			return 'form';
		}
	}

	_getExplode() {
		if (this._parameter.explode !== undefined) {
			// OAS3 param with explode
			return this._parameter.explode;
		}
		if (this._oasVersion === '2') {
			const result = adaptCollectionFormat(this._parameter);
			if (result) {
				return result.explode;
			}
		}
		// Defaults based on value of `in` - in OAS 2, the default is 'csv',
		// which is 'form' in OAS 3. In OAS3, the default is based on the
		// parameter 'in'.
		if ([ 'path', 'header' ].includes(this._parameter.in)) {
			return false;
		}
		// form style defaults to true (query, cookie)
		return true;
	}
}

/**
 * Adapt an OAS 2 parameter to OAS 3 `style` and `explode` properties. This will
 * only adapt `collectionFormat` to valid OAS 3 equivalents. It makes sense at
 * the time, but could be changed should the need arise. Only the following are
 * compatible with OAS 3. Also, while OAS 2 formData is a parameter, it is not
 * true for OAS 3, so does not appear in this list.
 *
 * | in       | collectionFormat  | style          | explode |
 * | -------- | ----------------- | -------------- | ------- |
 * | path     | csv (\|undefined) | simple         | false   |
 * | header   | csv (\|undefined) | form           | false   |
 * | query    | csv (\|undefined) | form           | false   |
 * | query    | multi             | form           | true    |
 * | query    | ssv               | spaceDelimited | false   |
 * | query    | pipes             | pipeDelimited  | false   |
 *
 * @param {object} oas2Param - The OAS 2 parameter with `collectionFormat`.
 * @returns {object} The adapted `{ style, explode }`
 */
function adaptCollectionFormat(oas2Param) {
	const {
		in: inLoc,
		collectionFormat = 'csv',
		type
	} = oas2Param;

	if (type === 'array') {
		if (collectionFormat === 'csv') {
			if (inLoc === 'path') {
				return {
					style: 'simple',
					explode: false
				};
			}
			return {
				style: 'form',
				explode: false
			};
		} else if (collectionFormat === 'multi') {
			if (inLoc === 'query') {
				return {
					style: 'form',
					explode: true
				};
			}
		} else if (collectionFormat === 'ssv' && inLoc === 'query') {
			return {
				style: 'spaceDelimited',
				explode: false // n/a
			};
		} else if (collectionFormat === 'pipes' && inLoc === 'query') {
			return {
				style: 'pipeDelimited',
				explode: false // n/a
			};
		}
	}
}

module.exports = OASParameter;
