const {
	convertOAS2HeaderToSchema,
	convertOAS2ResponseSchemaToSchema,
	enhanceSchemaDescription
} = require('../utils/schema');

class OASResponse {
	constructor(response, oasVersion) {
		// Define non-enumerable private props
		Object.defineProperty(this, '_response', {
			value: response
		});
		Object.defineProperty(this, '_oasVersion', {
			value: oasVersion
		});

		// Public properties
		this._setProperty('description', this._response.description);
		this._setProperty('statusCode', this._response.statusCode);
		this._setProperty('headers', this._getHeaders());
		this._setProperty('content', this._getContent());
	}

	_setProperty(name, value) {
		if (value !== undefined) {
			this[name] = value;
		}
	}

	_getContent() {
		if (this._oasVersion === '3') {
			const definition = this._response.definition;
			if (!definition.content) {
				return;
			}
			// Normalise the keys to lowercase
			return Object.keys(definition.content).reduce((content, type) => {
				content[type.toLowerCase()] = definition.content[type];
				return content;
			}, {});
		} else if (this._response.definition.schema) {
			// The OAS2 spec says if the schema field does not exist, it means no content is
			// returned as part of the response. This differs from OAS3 where it can define a
			// content for the response without specifying a schema.

			// OAS3 allows content-types per-response in what it "produces",
			// but OAS2 just has "produces".  So a response could technically
			// be any of the produces content-types. To document this, we set
			// a schema for each content-type in the content object.
			let contentTypes;
			if (this._response.operationObject.produces
				&& this._response.operationObject.produces.length) {
				contentTypes = this._response.operationObject.produces;
			} else {
				// If a user has defined a schema they're saying there is content returned,
				// but they have not have specified a content-type in produces. We don't have
				// any way of making use of this schema without choosing a content-type
				// to use as a media-type for it. Arguably this should be wildcard '*/*' which
				// would represent any content-type, rather than a specific type which could
				// easily be wrong, although their spec SHOULD have defined produces.
				contentTypes = [ 'application/json' ];
			}
			// The defined response schema applies to all possible content-types
			const schema = convertOAS2ResponseSchemaToSchema(this._response.definition.schema);
			return contentTypes.reduce((content, type) => {
				content[type.toLowerCase()] = { schema };
				return content;
			}, {});
		}
	}

	_getHeaders() {
		const headers = {};
		if (!this._response.headers) {
			return headers;
		}
		for (const header in this._response.headers) {
			// Normalise the header name
			const lcHeader = header.toLowerCase();
			headers[lcHeader] =	new OASHeader(this._response.headers[header], this._oasVersion);
		}
		return headers;
	}
}

class OASHeader {
	constructor(header, oasVersion) {
		// Define non-enumerable private props
		Object.defineProperty(this, '_header', {
			value: header
		});
		Object.defineProperty(this, '_oasVersion', {
			value: oasVersion
		});

		// Public properties
		this._setProperty('description', this._header.description);
		this._setProperty('required', this._header.required || false);
		this._setProperty('schema', this._getSchema());
	}

	_setProperty(name, value) {
		if (value !== undefined) {
			this[name] = value;
		}
	}

	_getSchema() {
		// In OAS 2, the schema bits are applied to the header itself.
		// In OAS3, the parameter has *one* schema bit, and all are applied to an
		// optional `schema`.
		let schema;
		if (this._oasVersion === '2') {
			schema = convertOAS2HeaderToSchema(
				this._header
			);
		} else if (this._header.content) {
			// Content and schema are mutually exclusive
			// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#parameterContent

			// content MUST only contain one entry
			schema = { ...Object.values(this._header.content)[0].schema };
		} else {
			schema = { ...this._header.schema };
		}
		enhanceSchemaDescription(this._header.description, schema);
		return schema;
	}
}

module.exports = OASResponse;
