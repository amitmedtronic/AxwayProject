const OASOperation = require('./operation');
const { OASSecuritySchemes } = require('./security');
const validate = require('../utils/validateOAS');

function getOASVersion(spec) {
	return spec.swagger ? '2' : '3';
}

/**
 * Wrapper class around Sway to maintain consistency between OAS2 and OAS3.
 * Note that Sway does not officially support OAS3 yet, see:
 * https://github.com/apigee-127/sway/issues/128
 */
class OAS {
	/**
	 * Creastes an OAS interface around a sway `SwaggerApi` instance.
	 * @param {object} spec - The sway object.
	 */
	constructor(spec) {
		// Define non-enumerable private props
		Object.defineProperty(this, '_spec', {
			value: spec
		});

		// Public properties
		this.oasVersion = getOASVersion(spec);
		this.description = this._spec.info.description;
		this.title = this._spec.info.title;
		this.version = this._spec.info.version;
		this.securitySchemes = new OASSecuritySchemes(spec, this.oasVersion);
		const hostInfo = this._getHostInfo();
		const servers = this._getServers();
		this.operations = [];
		for (const operation of spec.getOperations()) {
			this.operations.push(new OASOperation(
				operation, hostInfo, servers,
				this.securitySchemes, this.oasVersion
			));
		}
		this.components = this._getComponents();
	}

	/**
	 * Validates the OAS specification.
	 * @return {object} An object of `{ errors: [], warnings: [] }`
	 */
	validate() {
		if (this.oasVersion === '2') {
			return this._spec.validate();
		} else {
			// TODO: Add full validation for OAS 3
			return validate
				.validateOAS3(this._spec.definition, this._spec.references);
		}
	}

	_getComponents() {
		// There doesn't appear to be an accessor on sway to get components.
		const { definition } = this._spec;
		if (this.oasVersion === '2') {
			return definition.definitions || {};
		} else {
			return (definition.components && definition.components.schemas)
				|| {};
		}
	}

	_getServers() {
		// OAS3 servers
		if (this.oasVersion === '2') {
			return [];
		} else {
			return this._spec.servers || [];
		}
	}

	_getHostInfo() {
		// OAS2 hostInfo
		if (this.oasVersion === '2') {
			const {
				host,
				basePath = '',
				schemes = [ 'http' ]
			} = this._spec;

			return {
				host,
				basePath,
				schemes
			};
		} else {
			return null;
		}
	}
}

module.exports = OAS;
