// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#securitySchemeObject
// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#securitySchemeObject

class OASSecuritySchemes {
	constructor(spec, oasVersion) {
		let schemes;
		if (oasVersion === '2') {
			schemes = spec.definition.securityDefinitions;
		} else {
			schemes = spec.definition.components
				&& spec.definition.components.securitySchemes;
		}
		if (schemes) {
			for (const name in schemes) {
				this[name] = new OASSecurityScheme(schemes[name], oasVersion);
			}
		}
	}
}

class OASSecurityScheme {
	constructor(scheme, oasVersion) {
		// Define non-enumerable private props
		Object.defineProperty(this, '_scheme', {
			value: scheme
		});
		Object.defineProperty(this, '_oasVersion', {
			value: oasVersion
		});

		// Public properties
		this._setProperty('description', this._scheme.description);
		this._setProperty('name', this._scheme.name);
		this._setProperty('in', this._scheme.in);
		this._setProperty('bearerFormat', this._scheme.bearerFormat);
		this._setProperty('openIdConnectUrl', this._scheme.openIdConnectUrl);
		this._setProperty('scheme', this._getScheme());
		this._setProperty('flows', this._getFlows());
		this._setProperty('type', this._getType());
	}

	_setProperty(name, value) {
		if (value !== undefined) {
			this[name] = value;
		}
	}

	_getType() {
		if (this._oasVersion === '2' && this._scheme.type === 'basic') {
			return 'http';
		} else {
			return this._scheme.type;
		}
	}

	_getScheme() {
		if (this._oasVersion === '2' && this._scheme.type === 'basic') {
			return 'basic';
		} else {
			return this._scheme.scheme;
		}
	}

	_getFlows() {
		if (this._oasVersion === '2' && this._scheme.type === 'oauth2') {
			let flow = this._scheme.flow;
			// These flow names have been renamed in OAS3
			if (flow === 'application') {
				flow = 'clientCredentials';
			} else if (flow === 'accessCode') {
				flow = 'authorizationCode';
			}

			const flows = {
				[flow]: {
					scopes: this._scheme.scopes
				}
			};
			if (this._scheme.authorizationUrl) {
				flows[flow].authorizationUrl = this._scheme.authorizationUrl;
			}
			if (this._scheme.tokenUrl) {
				flows[flow].tokenUrl = this._scheme.tokenUrl;
			}
			return flows;
		} else {
			return this._scheme.flows;
		}
	}
}

module.exports = {
	OASSecuritySchemes,
	OASSecurityScheme
};
