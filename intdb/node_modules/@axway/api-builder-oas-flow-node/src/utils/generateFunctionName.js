const capitalize = require('capitalize');

// I could find no restrictions on parameter names in Swagger, so I will
// assume they are all valid, and that `:` denotes a regex, e.g.
// `{banana:[a-z]}`.  The regex below will match any set of characters
// within brackets {}, but has an optional, non-capturing group that starts
// with `:`.
const reSwaggerParam = new RegExp(/{(.+?)(?::.*?)?}/g);
const reParamName = new RegExp(/[^a-zA-Z0-9]/g);

/**
 * Method to create custom operationID-like operation id. Taken from
 * connectors team
 * NOTE: duplicated from code from arrow-admin-api/src/openapi-utils.js,
 * @param  {string} method - The method/verb (eg. "GET")
 * @param  {string} path   - The path (eg. /thing)
 * @return {string} The custom operationID
 */
function generateFunctionName(method, path) {
	const preserveOriginalCapitalization = true;
	const parts = path.split(/\//g);
	if (parts.length && parts[0] === '') {
		parts.shift();
	}
	const parsed = parts.reduce((acc, cur) => {
		if (cur.startsWith('{')) {
			reSwaggerParam.lastIndex = 0;
			const match = reSwaggerParam.exec(cur);
			reParamName.lastIndex = 0;
			match[1].split(reParamName).forEach(a => {
				acc.params.push(capitalize(a, preserveOriginalCapitalization));
			});
		} else {
			reParamName.lastIndex = 0;
			cur.split(reParamName).forEach(a => {
				acc.slugs.push(capitalize(a, preserveOriginalCapitalization));
			});
		}
		return acc;
	}, {
		slugs: [],
		params: []
	});
	if (!parsed.params.length) {
		return method.toLowerCase() + parsed.slugs.join('');
	} else {
		return `${method.toLowerCase()}${parsed.slugs.join('')}By${parsed.params.join('')}`;
	}
}

module.exports = {
	generateFunctionName
};
