/**
 * Generates a stub credential for the supplied swagger securityDefinition. Handles these security
 * schemes types: Basic, apiKey and openIdConnect. Any other type is simply ignored.
 *
 * @param {Object} scheme - The OAS securityScheme from which to create the credentials.
 * @param {Object} logger - The logger.
 *
 * @returns {Object} A stub credential.
 */
function stubCredential(scheme, logger) {
	const schemeType = scheme.type;
	if (schemeType === 'http') {
		if (scheme.scheme === 'basic') {
			return {
				type: 'basic',
				username: null,
				password: null
			};
		} else {
			// We don't support other http schemes currently in credentials
			// ref https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#security-scheme-object
			return logger.error(`HTTP ${scheme.scheme} scheme is not supported`);
		}
	} else if (schemeType === 'apiKey') {
		return {
			type: 'apiKey',
			key: null
		};
	} else if (schemeType === 'openIdConnect') {
		logger.error('OpenID Connect scheme is not supported');
	}
}

/**
 * Generates a stub credential for the OAuth2 flow types supplied in the swagger securityDefinition.
 * Only the valid security schemes flows are stubbed. As per spec, the valid values are:
 * 'implicit', 'password', 'clientCredentials'(application in OAS2) or 'accessCode'.
 *
 * @param {string} flowType - The flow used by the securityScheme.
 * @param {Object} flow - The OAS securityScheme flow from which to create the credentials.
 * @param {Object} logger - The logger.
 *
 * @returns {Object} A stub credential.
 */
function stubOAuth2Credential(flowType, flow, logger) {
	if (flowType === 'authorizationCode') {
		return {
			type: 'oauth2',
			flow: 'accessCode',
			authentication_url: flow.authorizationUrl,
			token_url: flow.tokenUrl,
			scope: Object.keys(flow.scopes).join(' '),
			client_id: null,
			client_secret: null,
			access_token: null,
			refresh_token: null
		};
	} else if (flowType === 'clientCredentials') {
		return {
			type: 'oauth2',
			flow: 'clientCredentials',
			token_url: flow.tokenUrl,
			scope: Object.keys(flow.scopes).join(' '),
			client_id: null,
			access_token: null
		};
	} else if (flowType === 'implicit') {
		// Implicit was designed for javascript. It does not use:
		// client_secret, token_url, or refresh_token
		// ref https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2#grant-type-implicit
		logger.error('OAuth 2.0 implicit flow is not supported');
	} else if (flowType === 'password') {
		logger.error('OAuth 2.0 password flow is not supported');
	}
}

/**
 * Generates stub credentials for the supplied swagger securityDefinitions and sets
 * them on the supplied `credentials` object.
 *
 * @param {Object} securitySchemes - The oas securitySchemes from which to create credentials.
 * @param {Object} logger - The logger.
 *
 * @returns {Object} Returns the set of `credentials`.
 */
function createStubCredentials(securitySchemes, logger) {
	const stubs = {};
	for (const name in securitySchemes) {
		const scheme = securitySchemes[name];
		if (scheme.type === 'oauth2') {
			// The oauth2 can have multiple flows in its spec, so we have to
			// iterate over and stub each of them.
			for (const flowType in scheme.flows) {
				const flow = scheme.flows[flowType];
				const stub = stubOAuth2Credential(flowType, flow, logger);
				if (stub) {
					// The oauth2 stubs are added as the flow type
					// authorizationCode/clientCredentials/implicit/password
					// prefixed with the scheme name to prevent clashing.
					stubs[`${name}_${flowType}`] = stub;
				}
			}
		} else {
			const stub = stubCredential(scheme, logger);
			if (stub) {
				stubs[name] = stub;
			}
		}
	}
	return stubs;
}

module.exports = createStubCredentials;
