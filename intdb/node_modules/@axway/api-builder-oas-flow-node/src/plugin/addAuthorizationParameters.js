const defaultDescriptions = {
	'apiKey-': 'An API Key',
	'oauth2-': 'An OAuth Bearer Token',
	'http-basic': 'A base64 encoded username:password combination'
};

/**
 * Adds an `authorization` parameter to the flow-node, given an operation object.
 * If operation does not have any security requirements, no `authorization` parameter will be added.
 * @param {SDK} sdk - The current SDK flow-node.
 * @param {object} operation - The operation object.
 */
function addAuthorizationParameters(sdk, operation) {
	const { security, securitySchemes, requiredSecurity } = operation;
	if (!security.length) {
		return;
	}
	for (const [ schemeId, scheme ] of Object.entries(securitySchemes)) {
		// We have a default description for all our currently supported authorizations
		const defaultDescription = defaultDescriptions[`${scheme.type}-${scheme.scheme || ''}`];
		let description;
		if (defaultDescription) {
			description = scheme.description || defaultDescription;
		} else if (scheme.description) {
			description = `UNSUPPORTED SECURITY SCHEME: ${scheme.description}`;
		} else {
			description = `UNSUPPORTED SECURITY SCHEME: ${schemeId} (${scheme.type})`;
		}
		sdk.authorization(
			schemeId,
			{
				type: 'string',
				description
			},
			{
				required: requiredSecurity.includes(schemeId)
			}
		);
	}
}

module.exports = addAuthorizationParameters;
