/**
 * Gets a list of server URL objects.  If OAS2 `operation.hostInfo` is defined,
 * then it will generate an array of server objects using the config URI
 * `overrides` where applicable to return an array of OAS3 URL servers:
 * `[ { url: 'https://server.io/basePath' } ]`.  Otherwise, it will
 * return the OAS3 `operation.servers`.
 *
 * @param {object} operation - The OAS operation object.
 * @param {object} operation.hostInfo - The OAS2 hostInfo object
 *		`{ schemes, host, basePath }`.
 * @param {object} operation.servers - The OAS3 array of servers.
 * @param {object} overrides - The config overrides (i.e. `config.uri`).
 * @return {object[]} An array of OAS3 server URL objects.
 */
function getServers({ hostInfo, servers }, overrides = {}) {
	if (hostInfo) {
		let { host } = overrides;
		let port = `${overrides.port || ''}`;
		const basePath = getBasePath(hostInfo.basePath, overrides.basePath);

		let schemes;
		if (overrides.protocol) {
			schemes = [ overrides.protocol ];
		} else if (hostInfo.schemes) {
			schemes = hostInfo.schemes;
		} else {
			schemes = [ 'http' ];
		}

		if (!host && hostInfo.host) {
			// might have a host:port
			const parts = hostInfo.host.split(':');
			host = parts.shift();
			if (!port.length && parts.length) {
				port = parts.shift();
			}
		}
		if (!host) {
			if (!basePath) {
				return [];
			} else {
				return [{ url: basePath }];
			}
		}

		if (port.length) {
			port = `:${port}`;
		}

		return schemes
			.filter(scheme => scheme === 'http' || scheme === 'https')
			.map(scheme => ({ url: `${scheme}://${host}${port}${basePath}` }));
	}

	return servers;
}

/**
 * Calculates the URI basePath based on the override.
 * @param {string} basePath - the value in the hostInfo
 * @param {string} override - the value from config
 * @returns {string} the basePath to use
 */
function getBasePath(basePath, override) {
	// Usually basePath cannot be an empty string. If provided it must lead with
	// a slash. In the override case, it's a little different since the user may
	// want to unset an existing value. Since undefined is "no override", the
	// choice is between null and empty string. Often this is done using null,
	// but in this case, empty string is more intuitive IMO (AH).
	if (override || override === '') {
		return override;
	}
	return basePath || '';
}

module.exports = getServers;
