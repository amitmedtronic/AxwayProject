const encodeURIComponentRFC3986 = require('strict-uri-encode');
const loadOAS = require('./loadOAS');
const OASPlugin = require('./OASPlugin');
const { isDeveloperMode, generateServiceConfig } = require('./generateServiceConfig');
const loadOASFiles = require('./loadOASFiles');
const { getParentPluginInfo } = require('../utils');

// Returns a plugin creator
// Example: require('api-builder-oas-flow-node')(module);
function getPluginFactory(parentModule) {

	/**
	 * @typedef oasInfo
	 * @type {object}
	 * @property {string} id - The unique id of the oas spec. Will be prefixed
	 *	with the plugin name and used to generate the flow-node id.
	 * @property {string} path - The path to the OAS spec.
	 * @property {string} [icon] - The path to an icon.
	 * @property {object|string} [spec] - Overrides `path`.  When supplied,
	 *	this is the `spec` that is used.  If not supplied, the OAS spec will
	 *	be loaded from `path`.
	 * @property {string} [name] A friendly name for the flow-node in the UI
	 */

	/**
	 * Resolves with a plugin.
	 * @param {object} pluginConfig - Configuration for the plugin.
	 * @param {object} options - Options for generating the plugin from OAS
	 *	files.
	 * @param {object} options.logger - A logger.
	 * @param {string} [options.oasDir] - A path from which to load OAS files.
	 *	Defaults to the plugin's "swagger" directory.
	 * @param {string} [options.configPrefix] - Custom prefix for config files
	 * @param {oasInfo[]} [options.oasInfos = []] - An array of meta-data used
	 *	for generating OAS flow-nodes from programmatically acquired specs.
	 *	Will be used in addition to `oasDir`.
	 * @returns {Promise} resolves with a plugin interface of loaded
	 *	flow-nodes and schema.
	 */
	return async function getPlugin(pluginConfig, options) {
		const {
			pluginName,
			defaultOASDir
		} = await getParentPluginInfo(parentModule);
		const {
			// we default to process.cwd for backward compatibility
			appDir = process.cwd(),
			logger: builderLogger,
			oasDir = defaultOASDir,
			oasInfos = [],
			configPrefix
		} = options;

		builderLogger.debug(`Loading OpenAPI specs from '${oasDir}'`);
		oasInfos.push(...loadOASFiles(oasDir));

		// TODO: support x-icon or x-logo in spec (not part of oas but common
		// extension)
		// see apis.guru specs
		// Decide if we want support for loading x-logo when
		// oasInfos is passed directly too
		// findSpecIcons(oasInfos)? // adds icon if doesn't exist on each oasInfo

		let flownodes = {};
		let schema = [];
		builderLogger.debug('Found the following OpenAPI specs:', oasInfos.map(a => a.id));
		for (const oasInfo of oasInfos) {
			const { id, path, icon } = oasInfo;
			const specId = path || id;
			// The spec is optional.  If not set, use `path`.
			const spec = oasInfo.spec || path;

			// TODO: validate that id is unique, (not in flownodes[id]) and also
			// that it is valid to be written to disk (config file) or in a URI
			// (nodehandler://id) then error if it's not valid.
			const logger = builderLogger.scope(
				null, { prefix: `[${pluginName}] [${id}]` }
			);

			try {
				const scope = encodeURIComponentRFC3986(`${pluginName}/${id}`);
				const oas = await loadOAS(spec, scope);
				const name = oasInfo.name || oas.title;

				try {
					validate(oas, { logger });
				} catch (ex) {
					logger.error('OpenAPI spec failed to validate:', specId);
					throw ex;
				}

				// If no config exists for this swagger, check if this is in
				// developer mode, and if so, generate a config file with stub
				// credentials.
				if (!pluginConfig[id]) {
					const isDev = isDeveloperMode();
					if (!isDev) {
						builderLogger.info(`There is no configuration for flow-node "${name}" and it will not be generated because this is not developer mode`);
					} else {
						generateServiceConfig({
							id,
							plugin: pluginName,
							oasVersion: oas.oasVersion,
							configPrefix,
							securitySchemes: oas.securitySchemes,
							name,
							logger,
							appDir
						});
					}
				}
				const plugin = OASPlugin.generate(oas, id, scope, name, icon, {
					// There's no guarantee that there will be config defined
					// for this oasInfo id, especially in production or first
					// load.
					config: pluginConfig[id] || {}
				});

				flownodes = {
					...flownodes,
					...plugin.flownodes
				};
				schema = schema.concat(plugin.schema);
			} catch (err) {
				logger.error('There was a problem creating Swagger flow-node from:', specId);
				// Reject the plugin even if only one of the swaggers fails to
				// compile to components
				throw err;
			}
		}
		return {
			flownodes,
			schema
		};
	};
}

function validate(oas, { logger }) {
	const results = oas.validate();
	for (const warning of results.warnings) {
		logger.trace('OAS validation warning:', warning);
	}
	if (results.errors.length) {
		const errors = JSON.stringify(results.errors);
		throw new Error(`There are ${results.errors.length} OAS validation error(s): ${errors}`);
	}
}

module.exports = getPluginFactory;
