const debug = require('debug');
const { sortContentTypes } = require('../utils');

const log = debug('oas-flow-node');

/**
 * Adds a group of "Advanced HTTP Options" parameters.
 * @param {SDK} sdk - The current SDK flow-node.
 * @param {OASOperation} operation - The operation object.
 * @param {ParameterMap} parameterMap - The parameter map.
 */
function addAdvancedHTTPOptions(sdk, operation, parameterMap) {
	sdk.group('Advanced HTTP Options');
	if (operation.requestBody && operation.consumes.length) {
		// otherwise, it is just a "get" with no body and it has no
		// content-type parameter.
		addContentTypeParameter(sdk, operation.consumes, parameterMap);
	}
	addAcceptParameter(sdk, operation.produces, parameterMap);
	addDecodeResponseParameter(sdk);
	addHeadersParameter(sdk);
}

/**
 * Adds "Content-Type" parameter.
 * @param {SDK} sdk - The current SDK flow-node.
 * @param {string[]} consumes - An array of content-types.
 * @param {ParameterMap} parameterMap - The parameter map.
 */
function addContentTypeParameter(sdk, consumes, parameterMap) {
	addMediaTypeParameter({
		sdk,
		name: 'content-type',
		title: 'Content-Type',
		description: 'This is the expected payload format that you send. If you do not want to send the Content-Type header, then leave the String value empty.',
		mediaTypes: consumes,
		parameterMap
	});
}

/**
 * Adds "Accept" parameter.
 * @param {SDK} sdk - The current SDK flow-node.
 * @param {string[]} produces - An array of content-types to accept.
 * @param {ParameterMap} parameterMap - The parameter map.
 */
function addAcceptParameter(sdk, produces, parameterMap) {
	addMediaTypeParameter({
		sdk,
		name: 'accept',
		title: 'Accept',
		description: 'This is the response format you expect to receive. If you do not want to send the Accept header, then leave the String value empty.',
		mediaTypes: produces,
		parameterMap
	});
}

function addMediaTypeParameter({
	sdk, name, title, description, mediaTypes, parameterMap }) {
	const schema = {
		title,
		description,
		type: 'string'
	};

	// https://json-schema.org/understanding-json-schema/reference/generic.html#id2
	// Generic Annotation `examples` that we will use to generate a combo-box.
	const examples = [ ...mediaTypes ];

	// we skip sorting for "content-type" since they are sorted earlier
	// in operation.js
	if (name === 'accept') {
		examples.sort(sortContentTypes);
	}
	if (examples.length) {
		schema.default = examples[0];
		schema.examples = examples;
	} else {
		schema.default = 'application/json';
		schema.examples = [ schema.default ];
	}

	log(`${name}:`, JSON.stringify(schema));
	const propertyName = parameterMap.register(`_${name}`, {
		location: 'header',
		name,
		defaultValue: schema.default
	});
	sdk.parameter(propertyName, schema, {
		initialType: 'string',
		required: false
	});
}

/**
 * Adds "Decode Response" parameter.
 * @param {SDK} sdk - The current SDK flow-node.
 */
function addDecodeResponseParameter(sdk) {
	const schema = {
		type: 'string',
		title: 'Decode Response',
		description: 'Controls how the response is decoded. If auto, a best-effort attempt will be made to decode the response according to its content-type header. If the content-type is "application/json", the response will decoded as JSON but may fail if the data is unparsable. If "text/*" or "application/xml" it will be returned as a string. For any other content-types and unknown charsets, the response be will be returned as a NodeJS Buffer. If binary, no decoding is attempted and the response will be returned as a NodeJS Buffer.',
		enum: [
			'auto',
			'binary'
		],
		default: 'auto'
	};
	log('decode-response');
	sdk.parameter('_decode-response', schema, {
		initialType: 'string',
		required: false
	});
}

function addHeadersParameter(sdk) {
	const schema = {
		name: 'headers',
		title: 'Headers',
		description: 'The HTTP headers. These will override any existing header already applied, e.g. any header parameter or any defined Advanced HTTP header. The header keys are case insensitive and the header value must be a string or null. Setting the value to null will ensure that the header is not passed to the backend.',
		type: 'object',
		additionalProperties: {
			oneOf: [
				{ type: 'string' },
				{ type: 'null' }]
		}
	};
	sdk.parameter('_headers', schema, {
		initialType: 'object',
		required: false
	});
}
module.exports = addAdvancedHTTPOptions;
