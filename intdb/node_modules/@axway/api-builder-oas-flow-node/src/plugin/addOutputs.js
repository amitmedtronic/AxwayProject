const getSchemaFromContent = require('./getSchemaFromContent');
const { convertOASSchemaToDraft06 } = require('../utils/schema');
const debug = require('debug');

const log = debug('oas-flow-node');

/**
 *
 * @param {object} sdk - The current SDK flow-node.
 * @param {array} responses - The responses information.
 */
function addOutputs(sdk, responses) {
	let hasDefaultOutput = false;
	for (const { statusCode, headers, description, content } of responses) {
		const output = {
			name: statusCode,
			description,
			context: '$.response',
			schema: {
				type: 'object',
				properties: {
					status: {
						type: 'integer'
					},
					headers: {
						type: 'object'
					}
				},
				required: [ 'status', 'headers' ]
			}
		};
		const required = [];
		const headerProp = output.schema.properties.headers;
		for (const header in headers) {
			headerProp.properties = headerProp.properties || {};
			headerProp.properties[header]
				= convertOASSchemaToDraft06(headers[header].schema);
			if (headers[header].required) {
				required.push(header);
			}
		}
		if (required.length) {
			headerProp.required = required;
		}

		if (statusCode === 'default') {
			hasDefaultOutput = true;
			output.name = 'Default';
		} else {
			// https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.6.1.3
			output.schema.properties.status.const = parseInt(statusCode, 10);
		}

		const schema = getSchemaFromContent(content);
		if (schema) {
			output.schema.properties.data = convertOASSchemaToDraft06(schema);
			output.schema.required.push('data');
		}

		log('output:', output.name);
		sdk.output(statusCode, output);
	}

	addErrorOutput(sdk);
	if (!hasDefaultOutput) {
		addDefaultOutput(sdk);
	}
}

/**
 * Adds error output.
 * @param {object} sdk - flow sdk
 */
function addErrorOutput(sdk) {
	sdk.output('error', {
		name: 'Error',
		context: '$.error',
		description: 'An error occurred during the flow-node execution',
		schema: {
			type: 'object',
			properties: {
				message: {
					description: 'The error message',
					type: 'string'
				},
				stack: {
					description: 'The error stack',
					type: 'string'
				}
			},
			required: [ 'message' ]
		}
	});
}

/**
 * Adds default output.
 * @param {object} sdk - flow sdk
 */
function addDefaultOutput(sdk) {
	sdk.output('default', {
		name: 'Default',
		context: '$.response',
		description: 'Default response for all HTTP codes not covered by the specification',
		schema: {
			type: 'object',
			properties: {
				status: {
					type: 'integer'
				},
				headers: {
					type: 'object'
				},
				data: {}
			},
			required: [ 'status', 'headers' ]
		}
	});
}

module.exports = addOutputs;
