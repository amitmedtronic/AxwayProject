const fs = require('fs');
const path = require('path');

// A list with all the allowed and supported swagger extensions
const ALLOWED_SWAGGER_EXTENSIONS = [ '.json', '.yaml', '.yml' ];

const FILE_EXTENSION_TO_FORMAT_TYPE = {
	'.json': 'json',
	'.yaml': 'yaml',
	'.yml': 'yaml'
};

/**
 * @param {string} swaggerPath - The swagger file path.
 * @return {Array} A list with all the service swaggers that has to be processed.
 */
function loadOASFiles(swaggerPath) {
	const items = [];

	// A list containing all the names of the swaggers we've processed.
	const swaggerList = [];
	if (fs.existsSync(swaggerPath)) {
		const [ swaggerFileNames, icons ] = fs.readdirSync(swaggerPath)
			.reduce((data, filename) => {
				const [ sfn, ico ] = data;
				const extension = path.extname(filename);
				const fileNameNoExtension = filename.replace(extension, '');

				if (ALLOWED_SWAGGER_EXTENSIONS.includes(extension)) {
					// Detects if we are trying to load multiple swagger files
					// with the same base name
					if (swaggerList.includes(fileNameNoExtension)) {
						throw new Error(`Only one format of '${fileNameNoExtension}' Swagger can be loaded at a time, but there are multiple formats: json and yaml found in '${swaggerPath}/'`);
					}

					// Add for processing
					sfn.push({
						name: fileNameNoExtension,
						fullname: filename,
						formatType: FILE_EXTENSION_TO_FORMAT_TYPE[extension]
					});

					// Keep track of all the swagger files we've processed so far.
					swaggerList.push(fileNameNoExtension);
				} else if (filename.match(/\.(?:bmp|jpeg|jpg|png|gif|tiff|svg)$/)) {
					if (!ico[fileNameNoExtension]) {
						ico[fileNameNoExtension] = [];
					}
					ico[fileNameNoExtension].push(filename);
				}
				return data;
			}, [[], {}]);

		swaggerFileNames.forEach((file) => {
			const filePath = path.join(swaggerPath, file.fullname);
			const fileName = file.name;

			items.push({
				id: fileName,
				icon: icons[fileName] ? path.join(swaggerPath, icons[fileName][0]) : null,
				path: filePath
			});
		});
	}

	return items;
}

module.exports = loadOASFiles;
