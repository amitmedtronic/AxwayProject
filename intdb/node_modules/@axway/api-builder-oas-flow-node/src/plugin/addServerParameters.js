const debug = require('debug');
const getServers = require('./getServers');

const log = debug('oas-flow-node');
const SERVER_URL_KEY = '_server.url';

function formatServerVariable(name, index) {
	return `_server.${index}.vars.${name}`;
}

/**
 * Adds the `operation.server` parameters to the flow-node.
 *
 * @param {SDK} sdk - The current SDK flow-node.
 * @param {OASOperation} operation - The operation object.
 * @param {ParameterMap} parameterMap - The disambiguated parameter names.
 * @param {object} config - Plugin config.  See `OASPlugin.generate`
 *		`options.config`.
 */
function addServerParameters(sdk, operation, parameterMap, config) {
	parameterMap.add(SERVER_URL_KEY);

	const servers = getServers(operation, config.uri);

	if (!servers.length) {
		const propertyName = parameterMap.register(SERVER_URL_KEY, {
			location: 'serverUrl',
			name: SERVER_URL_KEY
		});
		sdk.parameter(propertyName, {
			type: 'string',
			title: 'Server URL',
			description: 'The URL for the server.'
		}, {
			required: true
		});
		log('parameter property-name:', propertyName);
		return;
	}

	const options = {
		required: false,
		initialType: 'string'
	};

	const urls = new Set();
	for (const server of servers) {
		urls.add(server.url);
	}

	// Add all server variable names
	let index = 0;
	let hasVariables = false;
	for (const server of servers) {
		if (!server.variables) {
			continue;
		}
		hasVariables = true;
		for (const name of Object.keys(server.variables)) {
			parameterMap.add(formatServerVariable(name, index));
		}
		index++;
	}

	// Get the first server as default and add `Server URL`
	const server = servers[0];
	let serverDescription = 'The URL for the server.';
	if (hasVariables) {
		serverDescription += ' Note that one or more of the options may contain Server URL Variables.';
	}
	if (server.description) {
		serverDescription += ` ${server.description}`;
	}
	if (!serverDescription.endsWith('.')) {
		serverDescription += '.';
	}

	const propertyName = parameterMap.register(SERVER_URL_KEY, {
		location: 'serverUrl',
		name: SERVER_URL_KEY,
		defaultValue: server.url
	});

	sdk.parameter(propertyName, {
		type: 'string',
		title: 'Server URL',
		default: server.url,
		description: serverDescription,
		examples: Array.from(urls)
	}, options);

	// Register and all server variables
	index = 0;
	for (const server of servers) {
		if (!server.variables) {
			continue;
		}
		const paramOptions = {
			required: false
		};
		for (const [ name, def ] of Object.entries(server.variables)) {
			let description = `A variable for the Server URL ${server.url}.`;
			if (def.description) {
				description += ` ${def.description}`;
			}
			if (!description.endsWith('.')) {
				description += '.';
			}
			const schema = {
				type: 'string',
				title: name,
				description,
				group: 'Server URL Variables',
				default: def.default
			};
			if (def.enum) {
				schema.enum = def.enum;
				paramOptions.initialType = 'string';
			}

			const fmtName = formatServerVariable(name, index);
			const varPropertyName = parameterMap.register(fmtName, {
				location: 'serverUrlVariable',
				name: fmtName,
				defaultValue: def.default
			});

			sdk.parameter(varPropertyName, schema, paramOptions);
			log('parameter property-name:', varPropertyName);
		}
		index++;
	}
}

module.exports = addServerParameters;
