/**
 * Gets a map of unique schema from all of the available content-types.
 * Multiple content-types may share the same schema, so to avoid using `anyOf`
 * unnecessarily, this will reduce the available content-types based on
 * their encoded schema (as opposed to their content-type).
 *
 * @param {object} content A OAS3 content object
 * @return {object} A map of `{ schema, title }`
 */
function getUniqueSchemaFromRequestBodyContent(content = {}) {
	const bodies = {};
	const typeOfBody = {};
	for (const [ contentType, body ] of Object.entries(content)) {
		// schema is optional
		if (!body.schema) {
			continue;
		}
		const key = JSON.stringify(body.schema);
		bodies[key] = {
			schema: body.schema,
			title: body.schema.title
		};
		typeOfBody[key] = contentType;
	}
	return { bodies, typeOfBody };
}

/**
 * Construct a suitable JSON schema from an OAS3 content structure, e.g.:
 *	application/json:
 *		schema:
 *			type: string
 *	application/xml:
 *		schema:
 *			type: string
 *
 * If the schema are uniform, then a simple body is returned.  If the
 * schema differs between content-types, then a `anyOf` is used.
 * @param {object} content A OAS3 content object.
 * @return {object} A JSON schema
 */
function getSchemaFromContent(content) {
	// The OAS3 body parameter can have multiple content-types, which might
	// be different schemas. When they are different, we use `anyOf`. While
	// later, the user will have to match the body with the correct
	// content-type.
	const { bodies, typeOfBody }
		= getUniqueSchemaFromRequestBodyContent(content);
	const keys = Object.keys(bodies);
	let body;
	if (keys.length === 0) {
		return;
	} else if (keys.length === 1) {
		// This will always be the case in OpenAPI 2 since there will only be one schema for a
		// particular response code
		const contentBody = bodies[keys[0]];
		body = contentBody.schema;
	} else {
		const anyOf = [];
		for (const [ key, item ] of Object.entries(bodies)) {
			if (!item.schema.description) {
				// Prevent modification of original
				item.schema = Object.assign({}, item.schema);
				item.schema.description = `Body for type ${typeOfBody[key]}`;
			}
			anyOf.push(item.schema);
		}
		body = { anyOf };
	}

	return body;
}

module.exports = getSchemaFromContent;
