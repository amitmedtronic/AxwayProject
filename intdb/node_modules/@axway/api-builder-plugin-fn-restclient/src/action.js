const client = require('./client');

module.exports = {
	get: async (params, options) => _http('GET', params, false, true, options),
	head: async (params, options) => _http('HEAD', params, false, false, options),
	put: async (params, options) => _http('PUT', params, true, true, options),
	post: async (params, options) => _http('POST', params, true, true, options),
	patch: async (params, options) => _http('PATCH', params, true, true, options),
	delete: async (params, options) => _http('DELETE', params, false, true, options),
	options: async (params, options) => _http('OPTIONS', params, false, true, options)
};

async function _http(verb, params, sendBody, receiveBody, { pluginConfig, setOutput }) {
	const headers = params.headers || {};
	const options = {
		followRedirects: (params.followRedirect !== undefined)
			? params.followRedirect : true,
		maxRedirects: params.maxRedirects || 10,
		insecureSSL: !!params.insecure,
		decode: false,
		// encoding is handled by the `client`. it is a string, e.g. 'utf-8'.
		// if it is 'binary', the encoding should be set to `null`.
		encoding: (params.encoding && params.encoding.toLowerCase() === 'binary')
			? null : params.encoding
	};

	const reqBody = (params.hasOwnProperty('body') && sendBody) ? params.body : undefined;
	if (pluginConfig.proxy) {
		options.proxy = pluginConfig.proxy;
	}
	const { response, body }
		= await client.invoke(verb, params.url, reqBody, headers, options);

	const statusType = (response.status / 100) | 0;
	if (statusType) {
		const resp = {
			status: response.status,
			headers: response.headers
		};

		if (receiveBody) {
			resp.body = body;
		}
		return setOutput(`${statusType}xx`, resp);
	} else {
		throw new Error(response.error);
	}
}
