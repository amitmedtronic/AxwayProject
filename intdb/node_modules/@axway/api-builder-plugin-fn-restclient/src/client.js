const requester = require('@axway/requester');
const mime = require('mime');

const defaultHeaders	= {
	Accept: 'application/json',
	'Accept-Charset': 'utf-8'
};

const defaultPostHeaders = {
	Accept: 'application/json',
	'Accept-Charset': 'utf-8',
	'Content-Type': 'application/json; charset=utf-8'
};

const formats = {
	json: {
		parse: (data) => JSON.parse(data),
		serialize: (data) => {
			// do not serialize `data` as the new @axway/requester will encode
			// primitives and objects as JSON (a Buffer can be used to pass
			// pre-encoded JSON).
			return data;
		}
	}
};

const header = (headers, key) => {
	const k = Object.keys(headers).find(s => s.toLowerCase() === key.toLowerCase());
	return k ? headers[k] : undefined;
};

const parse = (body, contentType) => {
	const key = mime.getExtension(contentType);
	if (formats.hasOwnProperty(key)) {
		body = formats[key].parse(body);
	}
	return body;
};

const serialize = (body, contentType) => {
	const key = mime.getExtension(contentType);
	if (formats.hasOwnProperty(key)) {
		body = formats[key].serialize(body);
	}
	return body;
};

const client = async (method, url, body, hdrs, options) => {
	let headers;
	if (body) {
		headers = {
			...defaultPostHeaders,
			...hdrs
		};
		body = serialize(body, header(headers, 'content-type'));
	} else {
		headers = {
			...defaultHeaders,
			...hdrs
		};
	}

	const httpOptions = {
		method,
		url,
		body,
		headers
	};

	const { encoding } = options;
	// Remove `encoding` and delete it from options (it is not a requester
	// option).
	delete options.encoding;

	const response = await requester.request(httpOptions, options);

	let { body: responseBody } = response;
	// encoding is handled by this function now. it used to refer to `encoding`
	// option in the [request](https://www.npmjs.com/package/request) module,
	// where if it was `null`, the `body` was returned as a `Buffer`, anything
	// else, including `undefined`, would be passed to the encoding parameter
	// for `Buffer.toString`.
	if (encoding !== null) {
		responseBody = responseBody.toString(encoding);
	}

	const parsed = parse(responseBody, header(response.headers, 'content-type'));

	return {
		response,
		body: parsed
	};
};

exports = module.exports = {
	invoke: client
};
