const grants = require('./oauth2Grants');
const { status, States } = require('../status');
const SUPPORTED_FLOWS = [ 'accessCode', 'clientCredentials' ];

/**
 * Do type specific initialization of the credential.
 * @param {object} config The config.
 * @param {object} credential The credential to initialize.
 */
function initCredential(config, credential) {
	// Historically we had only accessCode flow so by default we were applying
	// the corresponding logic. For backward compatibility we set flow property to
	// accessCode if not specified.
	if (!credential.flow) {
		credential.flow = 'accessCode';
	}
	if (!SUPPORTED_FLOWS.includes(credential.flow)) {
		// UX Note: Client credentials tokens are obtained on startup. If we
		// have 4 correct credentails and 1 wrong we might obtain 4 tokens
		// from authorisation servers and then fail the app startup on the
		// 5th.
		throw new Error(`Invalid configuration for credential "${credential.name}", property "flow" is undefined or invalid. Supported flow grant types are: ${SUPPORTED_FLOWS}.`);
	}
	const grant = grants[credential.flow];
	if (grant.isStaticAccessToken(credential)) {
		credential.status = status({
			credential: States.credential.ok,
			action: States.action.none
		});
		return;
	}
	grant.init(credential, { ...config });
}

/**
 * Get the access token.
 * @param {object} credential The credential to get the token for.
 * @returns {*} The current access_token.
 */
function token(credential) {
	return grants[credential.flow].getToken(credential);
}

/**
 * Refresh the access token.
 * @param {object} credential The managed credential.
 * @returns {Promise} A promise that resolves with the refreshed credential.
 */
async function refresh(credential) {
	const grant = grants[credential.flow];
	if (!grant.refreshable(credential)) {
		return credential;
	}
	return grant.refresh(credential);
}

/**
 * Perform the code grant to authorize the credential.
 *
 * @param {object} credential The managed credential.
 * @param {object} options The authorization options.
 * @returns {Promise} A promise that resolves with the authorized credential.
 */
function authorize(credential, options) {
	return grants[credential.flow].requestToken(credential, options);
}

/**
 * Is this credential this
 * @param {object} credential The credential to refresh.
 * @returns {boolean} true if the credential can be refreshed.
 */
function refreshable(credential) {
	return grants[credential.flow].refreshable(credential);
}

exports = module.exports = {
	initCredential,
	refreshable,
	refresh,
	token,
	authorize
};
