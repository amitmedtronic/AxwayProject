/**
 * Decodes base64 encoded data.
 *
 * @param {object} params - A map of all the parameters passed from the flow.
 * @param {object} options - The additional options provided from the flow
 *	 engine.
 * @param {object} options.pluginConfig - The service configuration for this
 *	 plugin from API Builder config.pluginConfig['api-builder-plugin-pluginName']
 * @param {object} options.logger - The API Builder logger which can be used
 *	 to log messages to the console. When run in unit-tests, the messages are
 *	 not logged.  If you wish to test logging, you will need to create a
 *	 mocked logger (e.g. using `simple-mock`) and override in
 *	 `MockRuntime.loadPlugin`.  For more information about the logger, see:
 *	 https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/project/logging/index.html
 * @param {*} [options.pluginContext] - The data provided by passing the
 *	 context to `sdk.load(file, actions, { pluginContext })` in `getPlugin`
 *	 in `index.js`.
 * @return {*} The response value (resolves to "next" output, or if the method
 *	 does not define "next", the first defined output).
 */
async function decode({ data, as }) {
	if (data === undefined || data === null) {
		throw new Error('Missing required parameter: data');
	}

	const buf = Buffer.from(data, 'base64');
	if (!as || as === 'buffer') {
		return buf;
	}
	if (as === 'string') {
		return buf.toString('utf8');
	}
	if (as === 'number') {
		// number
		return parseInt(buf, 10);
	} else if (as === 'boolean') {
		// boolean
		const str = buf.toString('utf8').toLowerCase();
		return str !== 'false' && str !== '0' && str !== '';
	} else {
		// object
		return JSON.parse(buf.toString('utf8'));
	}
}

module.exports = decode;
