/* eslint no-console: off */
const chalk = require('chalk');
const util = require('util');
const { deprecate } = require('util');
const apiBuilderConfig = require('@axway/api-builder-config');

// The APIBuilder.Logger object is defined here:
// http://docs.appcelerator.com/platform/latest/#!/api/APIBuilder.Logger
//
// The actual appc-logger has additional, undocumented methods, such as ConsoleLogger,
// JSONStreamer, createHttpLogger, createExpressLogger, specialObjectClone,
// specialObjectClone, etc.  Since they're not documented, they don't exist.
//
// Unfortunately, APIBuilder.Logger is a defined API object, so need to maintain compatability
// with it.

/**
 * @class APIBuilder.Logger
 * The API Builder Logger class provides a logging utility. You can access
 * a local instance of the log utility using the `logger` property of the API Builder
 * instance.
 */
class Logger {
	/**
	 * @property {Number} TRACE
	 * Constant indicating the trace level
	 * @static
	 */
	static get TRACE() {
		return 10;
	}

	/**
	 * @property {Number} DEBUG
	 * Constant indicating the debug level
	 * @static
	 */
	static get DEBUG() {
		return 20;
	}

	/**
	 * @property {Number} INFO
	 * Constant indicating the info level
	 * @static
	 */
	static get INFO() {
		return 30;
	}

	/**
	 * @property {Number} WARN
	 * Constant indicating the warn level
	 * @static
	 */
	static get WARN() {
		return 40;
	}

	/**
	 * @property {Number} ERROR
	 * Constant indicating the error level
	 * @static
	 */
	static get ERROR() {
		return 50;
	}

	/**
	 * @property {Number} FATAL
	 * Constant indicating the fatal level
	 * @static
	 */
	static get FATAL() {
		return 60;
	}

	/**
	 * @property {Number} NONE
	 * Constant indicating the none level
	 * @static
	 */
	static get NONE() {
		return 70;
	}

	/**
	 * @method createLogger
	 * Creates a log utility instance.
	 * @static
	 * @param {Object} options Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createLogger(config) {
		const logger = new Logger(config);
		logger.stripColors = deprecate(logger.stripColors,
			'APIBuilder.logger.stripColors is deprecated. See: https://docs.axway.com/bundle/api-builder/page/docs/deprecations/index.html#D033',
			'D033'
		);
		return logger;
	}

	/**
	 * @method createDefaultLogger
	 * @alias #static-method-createLogger
	 * @static
	 * @deprecated since version 4.0
	 * @param {Object} config - Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createDefaultLogger(config) {
		return this.createLogger(config);
	}

	/**
	 * @method createRestifyLogger
	 * Creates a restify version of the log utility.
	 * @static
	 * @deprecated since version 4.0
	 * @param {APIBuilder} apibuilder - API Builder instance.
	 * @param {Object} config - Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createRestifyLogger(apibuilder, config) {
		return this.createLogger(config);
	}

	/**
	 * Creates a logger instance.
	 */
	constructor(config) {
		this.config = {
			log: config && config.log,
			scope: config && config.scope
		};
		if (config && config.level) {
			this.level(config.level);
		} else {
			this.level(Logger.NONE);
		}
	}

	/**
	 * @method level
	 * Sets or retrieves the log level.
	 * @param {Number/String} [level] Level to set.
	 * @return {Number} - The log level.
	 */
	level(level) {
		if (level !== undefined) {
			if (typeof level === 'string') {
				const uclevel = level.toUpperCase();
				if (!Logger.hasOwnProperty(uclevel)) {
					throw new Error(`invalid logging level ${level}`);
				}
				this.config.level = Logger[uclevel];
			} else {
				this.config.level = level;
			}
		}
		return this.config.level;
	}

	/**
	 * Checks if the logger is configured to log at the provided level.
	 * @param {string} level - the level to check (upper case).
	 * @returns {boolean} false if logs at the provided level will be ignored.
	 */
	willLogAt(level) {
		return Logger[level] >= this.config.level;
	}

	/**
	 * @method trace
	 * Logs a message with a trace-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the trace level is enabled.
	 */
	trace(...params) {
		log(this.config, 'TRACE', ...params);
	}

	/**
	 * @method debug
	 * Logs a message with a debug-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the debug level is enabled.
	 */
	debug(...params) {
		log(this.config, 'DEBUG', ...params);
	}

	/**
	 * @method info
	 * Logs a message with a info-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the info level is enabled.
	 */
	info(...params) {
		log(this.config, 'INFO', ...params);
	}

	/**
	 * @method warn
	 * Logs a message with a warn-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the warn level is enabled.
	 */
	warn(...params) {
		log(this.config, 'WARN', ...params);
	}

	/**
	 * @method error
	 * Logs a message with a error-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the error level is enabled.
	 */
	error(...params) {
		log(this.config, 'ERROR', ...params);
	}

	/**
	 * @method fatal
	 * Logs a message with a fatal-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the fatal level is enabled.
	 */
	fatal(...params) {
		log(this.config, 'FATAL', ...params);
	}

	/**
	 * Remove any ANSI color codes from the string.
	 * Does not work! (tried with chalk)
	 * @deprecated since version 4.0
	 * @param {string} str raw string to strip color codes from
	 * @returns {string}
	 */
	stripColors(str) {
		return String(str).replace(/\27\[\d+m/g, '');
	}

	/**
	 * @method scope
	 * Creates a log utility instance with request-level scope.
	 *
	 * @param {Object} request - The request object.
	 * @param {Object} [options] - A set of additional options that would affect the scoping
	 * of the logger.
	 * @param {string} [options.prefix] - The prefix to be used for the logging.
	 * @returns {APIBuilder.Logger}
	 * @private
	 */
	scope(req, options = {}) {
		const { prefix } = options;
		const config = Object.assign({}, this.config);
		// define a new scope replacing any previous one
		config.scope = prefix ? prefix : `[request-id: ${req.getId()}]`;

		const logger = new Logger(config);

		// Bind additional methods to the request specific logger.
		logger.logRequest = deprecate(logRequest.bind(null, logger),
			'Logger.logRequest and Logger.logResponse are deprecated. See: https://docs.axway.com/bundle/api-builder/page/docs/deprecations/index.html#D041',
			'D041'
		);
		logger.logResponse = deprecate(logResponse.bind(null, logger),
			'Logger.logRequest and Logger.logResponse are deprecated. See: https://docs.axway.com/bundle/api-builder/page/docs/deprecations/index.html#D041',
			'D041'
		);

		return logger;
	}

	getScoped(scope) {
		// Only allow strings.
		if (typeof scope !== 'string') {
			throw new Error('scope should be a string');
		}
		if (this.config.scope) {
			// Append new scope to existing scope
			scope = `${this.config.scope} ${scope}`;
		}
		// Return a new logger
		return Logger.createLogger({
			// Keep all the config from the current logger..
			...this.config,
			// ...aside from scope which is the new "appended" one.
			scope
		});
	}
}

// map level to output and colors
const cmap = {
	TRACE: {
		color: chalk.grey,
		level: chalk.grey('TRACE'),
		log: 'log'
	},
	DEBUG: {
		color: chalk.cyan,
		level: chalk.grey('DEBUG'),
		log: 'log'
	},
	INFO: {
		color: chalk.whiteBright,
		level: chalk.grey('INFO '),
		log: 'log'
	},
	WARN: {
		color: chalk.yellow,
		level: chalk.inverse(chalk.yellow('WARN ')),
		log: 'warn'
	},
	ERROR: {
		color: chalk.red,
		level: chalk.inverse(chalk.bgWhiteBright(chalk.red('ERROR'))),
		log: 'error'
	},
	FATAL: {
		color: chalk.red,
		level: chalk.inverse(chalk.bgWhiteBright(chalk.magenta('FATAL'))),
		log: 'error'
	}
};

function log(config, levelName, ...args) {
	// Ignore logs which are at a lower level than the current config level.
	if (Logger[levelName] < config.level) {
		return;
	}

	const ts = Date.now();
	const strs = args.map((arg) => {
		const isError = arg instanceof Error;
		if (isError) {
			// Print the error (and stack if applicable) out in one line.
			// Tbh this is pretty messy and at least we should keep it pretty-printing
			// in development (and/or configurable). Also why only errors?
			return util.inspect(arg).replace(/[\r\n]+/g, ' ');
		} else if (typeof arg === 'object') {
			try {
				return JSON.stringify(arg);
			} catch (err) {
				// Can't be JSON stringified - can be due to circular references
			}
		}
		return arg;
	});

	const entry = cmap[levelName];
	// config.log is an internal way to override the console logging and
	// plug another logger e.g. for testing/scanning log messages.  but
	// note that it is _not_ used and _not_ documented.  to enable it,
	// look for `Logger.createLogger` in apibuilder.js and add:
	// `log: this.config.log`.
	const logfn = config.log || console[entry.log];

	// Include the current scope if we have one defined
	if (config.scope) {
		strs.unshift(config.scope);
	}

	// Note that if the first argument does not contain a valid format,
	// `util.format` does a string concatenation of all arguments
	// https://nodejs.org/api/util.html#util_util_format_format_args
	// Format calls `util.inspect` on each non-string which gives a good
	// output, but it is also blocking and not recommended on hot code
	// paths. We can review at a later date since we don't want to stop
	// important data being printed unintentionally.
	if (!apiBuilderConfig.flags.enableLoggingOfLevel) {
		// old log format (with extra space)
		logfn(chalk.grey(ts), entry.color(util.format('', ...strs)));
	} else {
		logfn(
			chalk.grey(ts),
			cmap[levelName].level,
			entry.color(util.format('%s', ...strs))
		);
	}
}

/**
 * Specialized bookend function to log the request.
 * @param {object} logger - The logger.
 * @param {object} req - The request.
 */
function logRequest(logger, req) {
	logger.info('Request', chalk.grey(JSON.stringify(req)));
}

/**
 * Specialized bookend function to log the response.
 * @param {object} logger - The logger.
 * @param {object} req - The request.
 */
function logResponse(logger, resp) {
	logger.info('Response', chalk.grey(JSON.stringify(resp)));
}

Logger.createDefaultLogger = deprecate(Logger.createDefaultLogger,
	'Logger.createDefaultLogger is deprecated. See: https://docs.axway.com/bundle/api-builder/page/docs/deprecations/index.html#D034',
	'D034'
);
Logger.createRestifyLogger = deprecate(Logger.createRestifyLogger,
	'Logger.createRestifyLogger is deprecated. See: https://docs.axway.com/bundle/api-builder/page/docs/deprecations/index.html#D035',
	'D035'
);

exports = module.exports = Logger;
