/**
 * Manages pluggable middleware. The `init` method can be async and can
 * optionally return a `async function shutdown()` used to free up any
 * resources. The `bind` is called at the end of startup and can be used to bind
 * ports or log.
 * @example <caption>getPlugin</caption>
 * const instance = {
 *   middleware(req, resp, next) { },
 *   async bind() { }, // optional
 *   async shutdown() { } // optional
 * };
 * return { middleware: { metrics: (app) => instance } };
 */
class MiddlewareManager {
	constructor() {
		this.middlewares = [];
		this.instances = [];
	}

	/**
	 * Adds a middleware to the manager.
	 * @param {function} getInstance - A function that has the signature:
	 * `function (app)`.
	 */
	add(getInstance) {
		this.middlewares.push(getInstance);
	}

	/**
	 * Calls all the the `getMiddleware` functions that were registered with the
	 * plugins, and then calls `app.use` with the middleware.
	 * @param {object} app - The express app.
	 */
	async init(app, { logger, config }) {
		for (const getMiddleware of this.middlewares) {
			// stuck with the traditional `app.use` middleware here. the `app`
			// could easily have been passed into this function and it could
			// have called `app.use`. however, went with this since it was not
			// necessary.
			logger.debug('registering', getMiddleware.name,
				'middleware on:', config.apiPrefix);
			const instance = await getMiddleware();
			app.use(config.apiPrefix, instance.middleware);
			this.instances.push(instance);
		}
	}

	/**
	 * Calls all the the optional `bind` functions on the instances returned
	 * from `getMiddleware`. The `bind` is an opportunity to log a user message,
	 * or to bind additional resources, such as ports.
	 */
	async bind() {
		for (const instance of this.instances) {
			if (instance.bind) {
				await instance.bind();
			}
		}
	}

	/**
	 * Calls all the the optional `shutdown` functions on the instances returned
	 * from `getMiddleware`. The `shutdown` is an opportunity to free resources.
	 */
	async shutdown() {
		for (const instance of this.instances) {
			if (instance.shutdown) {
				await instance.shutdown();
			}
		}
	}
}

module.exports = { MiddlewareManager };
