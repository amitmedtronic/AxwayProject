/**
 * Compare values.
 *
 * @param {string|number} itemA - The item to compare.
 * @param {string|number} itemB - The item to compare against.
 * @return {number} the sort order
 */
function compareByValue(itemA, itemB) {
	// lowest to highest
	if (itemA === itemB) {
		return 0;
	}
	return itemA > itemB ? 1 : -1;
}

/**
 * Compare an API or Route's HTTP `method` property.
 *
 * @param {object} itemA - The item to compare.
 * @param {object} itemB - The item to compare against.
 * @return {number} the sort order
 */
function compareMethod(itemA, itemB) {
	const methodA = itemA.method;
	const methodB = itemB.method;
	if (methodA === methodB) {
		return 0;
	} else {
		const methods = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];
		const aSort = methods.indexOf(methodA);
		const bSort = methods.indexOf(methodB);

		if (aSort === -1 && bSort === -1) {
			return compareByValue(methodA, methodB);
		} else if (aSort === -1 && bSort >= 0) {
			return 1;
		} else if (aSort >= 0 && bSort === -1) {
			return -1;
		} else {
			return compareByValue(aSort, bSort);
		}
	}
}

/**
 * Compare an API or Route's `path` property.
 *
 * @param {object} itemA - The item to compare.
 * @param {object} itemB - The item to compare against.
 * @return {number} the sort order
 */
function comparePath(itemA, itemB) {
	return compareByValue(itemA.path, itemB.path);
}

/**
 * Compare an API or Route's `sort` property in descending order.
 *
 * @param {object} itemA - The item to compare.
 * @param {object} itemB - The item to compare against.
 * @return {number} the sort order
 */
function compareSort(itemA, itemB) {
	return -1 * compareByValue(itemA.sort, itemB.sort);
}

function filterPathParams(param) {
	return param.type === 'path';
}

/**
 * Compare the number of path parameters from API or Routes.
 *
 * @param {object} itemA - The item to compare.
 * @param {object} itemB - The item to compare against.
 * @return {number} the sort order
 */
function comparePathParamCount(itemA, itemB) {
	const aParams = Object.values(itemA.parameters || {}).filter(filterPathParams);
	const bParams = Object.values(itemB.parameters || {}).filter(filterPathParams);
	return compareByValue(aParams.length, bParams.length);
}

/**
 * Comparator function used in sorting the APIs and Routes.
 *
 * It leverages 4 more granular comparator functions that compare the `sort`
 * property, the `path` parameter count, `path` alpabetically, and `method`.
 *
 * @param {object} itemA - The item to compare.
 * @param {object} itemB - The item to compare against.
 * @return {number} the sort order
 */
function compareItems(itemA, itemB) {
	const compareItemBy = [
		compareSort,
		comparePathParamCount,
		comparePath,
		compareMethod
	];

	let sortOrder = 0;
	let i = 0;

	// Iterate over each comparator function and
	// continue if the sortOrder is equal.
	// Stops in case there are no more comparators.
	while (sortOrder === 0 && i < compareItemBy.length) {
		const compareFn = compareItemBy[i++];
		sortOrder = compareFn(itemA, itemB);
	}
	return sortOrder;
}

/**
 * Task to sort API and Routes.  Must be bound to APIBuilder.
 * The order is:
 * 	1) by "sort"
 * 	2) by path param count (low to high)
 * 	3) by api/route path
 * 	4) by http method
 *
 * @param {object[]} items - An array of API or Route to sort
 * @example
 * tasks.push(startTasks.sortAPIsOrRoutes.bind(this, this.apis));
 * @param {*} next The callback
 */
function sortAPIsOrRoutes(items, next) {
	items.sort(compareItems);
	next();
}

module.exports = sortAPIsOrRoutes;
