const fs = require('fs');
const path = require('path');
const util = require('util');
const { allSettled } = require('../utils');

const afs = {
	access: util.promisify(fs.access),
	readdir: util.promisify(fs.readdir)
};

async function loadTriggers() {
	const triggerDir = path.join(this.config.dir, 'triggers');

	const accessMask = this.admin
		? fs.constants.R_OK | fs.constants.W_OK // dev
		: fs.constants.R_OK; // production

	try {
		await afs.access(triggerDir, accessMask);
	} catch (ex) {
		// intentionally just trace here
		this.logger.debug(
			'Not loading triggers, directory not found, or does not have required access.');
		return;
	}

	this.logger.trace('Loading triggers from:', triggerDir);

	const promises = [];
	const files = await afs.readdir(triggerDir);
	for (const file of files) {
		const ext = path.extname(file);
		if (ext !== '.yml' && ext !== '.yaml') {
			continue;
		}
		const filePath = path.resolve(triggerDir, file);
		const promise
			= this._internal.getTriggerManager().loadTrigger(filePath);
		promises.push(promise);
	}
	const results = await allSettled(promises);
	const rejected = results.filter(a => a.status === 'rejected');
	for (const reject of rejected) {
		this.logger.error('Error loading trigger:', reject.reason);
	}
	if (rejected.length) {
		throw rejected[0].reason;
	}
	this.logger.trace('Finished loading triggers');
}

module.exports = loadTriggers;
