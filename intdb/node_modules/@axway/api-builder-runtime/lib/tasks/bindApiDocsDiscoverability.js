/**
 * Binds a parsable document of all apidoc URLs on the apidoc prefix.
 * The bindAPIDocs task must be run first.
 * @param {object} apibuilder
 */
async function bindApiDocsDiscoverability(apibuilder) {
	const { config, _internal } = apibuilder;
	const pathManager = _internal.getPathManager();
	const apiSpecs = _internal.getApiSpecs();
	const dynamicOpenAPI = _internal.getDynamicOpenAPI().spec;

	// Bind the URL
	pathManager.bindPath('get', config.apidoc.prefix, {
		cb: (req, res) => {
			// Use the request host and protocol for the returned URLs
			const host = `${req.protocol}://${req.get('host')}`;

			const response = {
				version: '1.0',
				types: {
					openapi: [
						// The dynamic OpenAPI document. This will eventually become
						// a spec like the others and not be hardcoded here.
						{
							id: 'dynamic',
							version: dynamicOpenAPI.info.version,
							name: dynamicOpenAPI.info.title,
							description: dynamicOpenAPI.info.description,
							links: [
								{
									url: `${host}${config.apidoc.prefix}/swagger.json`,
									mimeType: 'application/json',
									specificationVersion: '2.0'
								},
								{
									url: `${host}${config.apidoc.prefix}/swagger.yaml`,
									mimeType: 'text/yaml',
									specificationVersion: '2.0'
								}
							]
						}
					]
				}
			};

			for (const apiSpec of apiSpecs) {
				response.types[apiSpec.type] = response.types[apiSpec.type] || [];
				response.types[apiSpec.type].push({
					id: apiSpec.triggerTypeId,
					// version can be undefined
					version: apiSpec.version,
					name: apiSpec.name,
					description: apiSpec.description,
					links: apiSpec.links.map(link => {
						let path = link.url;
						// ensure all relative URLs are converted to absolute
						// URLs on the requesting host.
						if (path.startsWith('/')) {
							path = `${host}${path}`;
						}
						return {
							url: path,
							// mimeType can be undefined
							mimeType: link.mimeType,
							// specificationVersion can be undefined
							specificationVersion: link.specificationVersion
						};
					})
				});
			}

			// send the response as JSON. In the future we may send HTML on request.
			res.status(200).send(response);
		}
	});
}

module.exports = bindApiDocsDiscoverability;
