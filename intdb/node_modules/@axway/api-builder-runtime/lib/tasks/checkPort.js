const net = require('net');

module.exports = function (port, next) {
	isPortAvailable(port, available => {
		if (!available) {
			return next(new Error(`Assigned port (${port}) is already in use. \
Please see if you have a running instance of this service on this machine.`));
		}
		this.logger.debug(`port ${port} available for use`);
		return next();
	});
};

/**
 * Calls callback with true if available, false if not.
 *
 * @param {number} port - port to check
 * @param {function} cb - callback function to be invoked with the result
 * @param {number} tries - the current number of verify attempts. Max 3 attempts are made.
 */
function isPortAvailable(port, cb, tries = 0) {
	tries++;
	const server = net.createServer();
	server.listen(port, (err) => {
		if (err) {
			return cb(false);
		}
		server.once('close', () => {
			cb(true);
		});
		server.close();
	});
	server.once('error', (err) => {
		try {
			server.close();
		} catch (e) {
			// Ignore error
		}
		if (err.code !== 'EADDRINUSE' || tries > 3) {
			return cb(false);
		}
		// on restart, sometimes a bind will fail, so let's try it again
		// for up to 3 times
		setTimeout(() => {
			isPortAvailable(port, cb, tries);
		}, 10);
	});
}
