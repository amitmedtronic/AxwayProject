const util = require('util');
const chalk = require('chalk');

/**
 * Initializes a connector and registers models.  Should be done during 'load'.
 * @param {object} instance - The API Builder instance.
 * @param {string} name - The connector name.
 */
async function loadConnector(instance, name) {
	const connector = instance.getConnector(name);
	if (connector.enabled === false) {
		return;
	}

	const connectorName
		= `connector/${connector.name}${connector.version ? `@${connector.version}` : ''}`;

	if (connector.config && connector.config.enabled === false) {
		instance.logger.info(chalk.green(connectorName), 'is disabled in config.');
		return;
	}
	if (connector.connected || connector.started) {
		instance.logger.trace('Skipping, connector already connected:', connectorName);
		return;
	}

	const connectAsync = util.promisify(connector.connect.bind(connector));
	try {
		instance.logger.info('Starting', chalk.green(connectorName));
		await connectAsync();
		connector.started = true;
		connector.enabled = true;
		instance.logger.info('Started', chalk.green(connectorName));
	} catch (ex) {
		connector.started = false;
		connector.enabled = false;
		instance.logger.error(`Error loading ${connectorName}.`, (ex.message || ex));
		if (instance.config.connectors[name].modelAutogen) {
			// If we're generating API from models, then this connector is
			// technically in-use and we should bail, rather than allow
			// startup
			throw ex;
		}
		instance.logger.info(chalk.green(connectorName),
			'had an error, so it is disabled and it will not be available.');
	}
}

/**
 * Starts all registered dataconnectors. Throws if the connector fails to
 * start and API generation is enabled.
 */
async function loadConnectors() {
	if (this.loadOnly) {
		this.logger.trace('Not starting connectors');
		return;
	}

	const connectors = this.getConnectors();
	// Start registered connectors
	for (const [ name, connector ] of Object.entries(connectors)) {
		if (connector.connect) {
			await loadConnector(this, name);
		}
	}
}

module.exports = loadConnectors;
