
function shutdownHandler(apibuilder) {
	if (apibuilder.shuttingdown) {
		return;
	}
	apibuilder.stop();
}

function unavailableHandler(apibuilder, message) {
	if (apibuilder.shuttingdown) {
		return;
	}
	if (!apibuilder._internal.isUnavailable()) {
		apibuilder._internal.setUnavailable(message);
	}
}

async function unstableHandler(apibuilder, message) {
	apibuilder.unstable = true;
	try {
		// It is possible for flow-triggers to emit unstable while the service
		// is actually starting.  This blocks until the service started.
		await apibuilder._internal.state.started;
	} catch (ex) {
		// system became unstable while starting, it will auto-shutdown.
		return;
	}

	if (apibuilder.shuttingdown || apibuilder._internal.isUnavailable()) {
		return;
	}
	const isDeveloperMode = !!apibuilder.admin;
	const msg = `Parts of the system have become unstable and your service may not continue to work as expected. In production, this will cause your service to exit and you should use a process manager to restart. In development mode you should correct the error and restart. For more information, https://docs.axway.com/bundle/api-builder/page/docs/best_practices/index.html#managing-your-service The error is: ${message}`;
	if (isDeveloperMode) {
		apibuilder.logger.error('system-unavailable', msg);
		apibuilder.emit('system-unavailable', message);
	} else {
		apibuilder.logger.error('system shutdown', msg);
		apibuilder.emit('shutdown');
	}
}

let handleShutdown;
let handleUnavailable;
let handleUnstable;

function bindEvents() {
	handleShutdown = shutdownHandler.bind(null, this);
	handleUnavailable = unavailableHandler.bind(null, this);
	handleUnstable = unstableHandler.bind(null, this);

	this.on('shutdown', handleShutdown);
	this.on('system-unavailable', handleUnavailable);
	this.on('unstable', handleUnstable);
}

function unbindEvents() {
	if (handleShutdown) {
		this.removeListener('shutdown', handleShutdown);
		handleShutdown = null;
	}
	if (handleUnavailable) {
		this.removeListener('system-unavailable', handleUnavailable);
		handleUnavailable = null;
	}
	if (handleUnstable) {
		this.removeListener('unstable', handleUnstable);
		handleUnstable = null;
	}
}

module.exports = {
	bindEvents,
	unbindEvents
};
