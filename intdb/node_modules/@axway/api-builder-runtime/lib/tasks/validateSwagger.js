const SwaggerParser = require('@apidevtools/swagger-parser');

/**
 * Generate and validate a service swagger
 * Can be simplified and combined with validate() when we remove warnOnly
 * and exitOnSwaggerSchemaValidationError flag
 * @param {object} apibuilder - APIBuilder instance
 * @param {object} options - validation options.
 * @param {boolean} options.warnOnly - will warn and not throw any exception
 * @async
 */
async function validateSwagger(apibuilder, { warnOnly }) {
	apibuilder.logger.trace('Validating generated OpenAPI');
	// Filter out the duplicate OperationId error
	try {
		await validate(apibuilder);
	} catch (err) {
		if (warnOnly) {
			apibuilder.logger.warn(
				'The OpenAPI document generated for your service is invalid!', err
			);
		} else if (err.message
				&& err.message.includes('Validation failed. Duplicate operation id')) {
			// we are in !warnOnly but don't want to throw for duplicate operation id error
			// for backward compatibility
			apibuilder.logger.warn(err.message);
		} else {
			throw err;
		}
	}
}

/**
 * Generate and validate a service swagger
 * @param {object} apibuilder - APIBuilder instance
 * @async
 */
async function validate(apibuilder) {
	// Generate the service swagger. We're hardcoding the host which would
	// usually come from the request since we don't have anything better.
	const { spec } = apibuilder._internal.getDynamicOpenAPI();
	return SwaggerParser.validate(spec);
}

module.exports = validateSwagger;
