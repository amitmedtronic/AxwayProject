const finalhandler = require('finalhandler');

function bindErrorHandlingMiddleware(instance) {
	const app = instance.app;
	const env = app.get('env');

	// Bind error handling middleware to the Express app replacing the default one.
	// The response is constructed by finalhandler library that is also internally
	// used by Express. The difference we add is the `onerror` logger function that
	// logs the error at debug level using our own logger.
	/* eslint-disable-next-line no-unused-vars */
	app.use((err, req, res, next) => {
		const done = finalhandler(req, res, {
			env,
			onerror
		});
		done(err);
	});

	function onerror(err, req) {
		// In some cases we don't have logger on the request object
		// e.g. accessing apibuilderPing.json
		req.logger ? req.logger.debug(err) : instance.logger.debug(err);
	}
}

module.exports = bindErrorHandlingMiddleware;
