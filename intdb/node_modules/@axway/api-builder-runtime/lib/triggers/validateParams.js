const { validateJsonPathSelector } = require('axway-flow-graph');

class ParameterValidator {
	constructor({ ajv, schema, onError }) {
		this._ajv = ajv;
		this._onError = onError;
		this._schema = schema;
	}

	/**
	 * Validates an object of `parameters` against the input schema, and
	 * returns a validation object.  It will iterate over each parameter in
	 * the schema and perform validations on each, to see if each parameter
	 * is required, in the schema, and whether or not the value is valid.
	 * If the valid is JSON path, then it is checked to see if it is a valid
	 * JSON path.  If it is not a JSON path, then the value is checked against
	 * the schema.
	 * @param {object} parameters - An object of parameters of name:value.
	 * @returns {object} A validation object of `{ valid, errors }`.
	 */
	validate(parameters) {
		if (!this._schema) {
			return;
		}
		this._checkRequired(this._schema, parameters);
		this._checkInSpec(this._schema, parameters);
		this._checkValues(this._schema, parameters);
	}

	_checkRequired(specParam, params) {
		const required = specParam && specParam.required || [];
		for (const name of required) {
			if (params.hasOwnProperty(name)) {
				continue;
			}
			this._onError({ code: 'MISSING_VALUE', name });
		}
	}

	_checkInSpec(specParam, params) {
		const names = Object.keys(params);
		for (const name of names) {
			if (specParam
				&& specParam.properties
				&& specParam.properties.hasOwnProperty(name)) {
				continue;
			}
			this._onError({ code: 'NOT_IN_SPEC', name });
		}
	}

	_checkValues(specParam, params) {
		for (const name in specParam.properties) {
			if (!params.hasOwnProperty(name)) {
				continue;
			}
			const value = params[name];
			const type = getValueType(value);
			const error = { name };

			if (type === 'jsonpath') {
				const invalid = checkJSONPath(value);
				if (!invalid) {
					continue;
				}
				error.code = invalid.code;
				error.errors = [ invalid.error ];
			} else if (type === 'string') {
				// ajv type check
				const validate
					= this._ajv.compile(specParam.properties[name]);
				const valid = validate(value);
				if (valid) {
					continue;
				}
				error.code = 'INVALID_VALUE';
				error.errors = validate.errors;
			} else {
				error.code = 'INVALID_TYPE';
				error.errors = [ `The type '${type}' is not a valid type` ];
			}
			this._onError(error);
		}
	}
}

function checkJSONPath(value) {
	const failed = validateJsonPathSelector(value);
	if (failed) {
		return {
			code: 'INVALID_JSONPATH',
			error: failed.error
		};
	}
}

function getValueType(value) {
	if (isJSONPath(value)) {
		return 'jsonpath';
	}
	return typeof value;
}

function isJSONPath(value) {
	return value
		&& value.startsWith
		&& (value === '$' || value.startsWith('$.'));
}

function validateParams({ ajv, schema, onError }) {
	return new ParameterValidator({ ajv, schema, onError });
}

module.exports = validateParams;
