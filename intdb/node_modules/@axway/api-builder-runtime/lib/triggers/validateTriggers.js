const validateParams = require('./validateParams');

/*
validates `triggers`:
{
	kafka: {
		'my-kafka-1': {
			instanceName: 'Quick Start',
			triggerParameters: {
				groupId: 'quickstart',
				topic: 'quickstart-events',
				messageFormat: 'JSON',
				fromBeginning: 'false'
			},
			channelParameters: {
				clientId: 'my-client',
				brokers: 'localhost:9092'
			},
			flowInputsMap: {
				request: '$.request'
			}
		}
	}
}
*/
class TriggersValidator {
	constructor({ ajv, triggers, definitions, flowInputSchema, onError }) {
		this._ajv = ajv;
		this._triggers = triggers;
		this._onError = onError;
		this._definitions = definitions;
		this._flowInputSchema = flowInputSchema;
	}

	validate() {
		let errors = [];
		const onError = (error) => errors.push(error);

		for (const type in this._triggers) {
			for (const triggerId in this._triggers[type]) {
				if (!this._definitions[type]) {
					// it is possible for triggers to be registered in "error"
					// even if the plugin does not exist.  sets an error
					// without some details: (parameter) name, errors
					this._onError({
						id: triggerId,
						type,
						errorType: 'invalidFlowTriggerPlugin',
						code: 'NOT_IN_SPEC'
					});
					continue;
				}
				const trigger = this._triggers[type][triggerId];
				const {
					triggerParameters,
					channelParameters,
					flowInputsMap
				} = trigger;

				if (channelParameters) {
					errors = []; // clear errors
					validateParams({
						ajv: this._ajv,
						schema: this._definitions[type].channelParameters,
						onError
					})
						.validate(channelParameters);
					for (const error of errors) {
						this._onError({
							id: triggerId,
							type,
							errorType: 'invalidChannelParameter',
							...error
						});
					}
				}

				if (flowInputsMap) {
					errors = []; // clear errors
					validateParams({
						ajv: this._ajv,
						schema: this._flowInputSchema,
						onError
					})
						.validate(flowInputsMap);
					for (const error of errors) {
						this._onError({
							id: triggerId,
							type,
							errorType: 'invalidFlowInputParameter',
							...error
						});
					}
				}

				errors = []; // clear errors
				validateParams({
					ajv: this._ajv,
					schema: this._definitions[type].triggerParameters,
					onError
				})
					.validate(triggerParameters);
				for (const error of errors) {
					this._onError({
						id: triggerId,
						type,
						errorType: 'invalidTriggerParameter',
						...error
					});
				}
			}
		}
	}
}

function validateTriggers({
	ajv, triggers, definitions, flowInputSchema, onError
}) {
	return new TriggersValidator({
		ajv, triggers, definitions, flowInputSchema, onError
	}).validate();
}

module.exports = validateTriggers;
