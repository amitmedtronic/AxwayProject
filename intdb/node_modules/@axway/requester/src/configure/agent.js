const http = require('http');
const https = require('https');
const { URL } = require('url');
const ProxyAgent = require('proxy-agent');
const debug = require('debug');

const log = debug('api-builder:request');

const globalAgents = {};

/**
 * Configures a HTTP Agent that can be used for `keep-alive`, and `proxy`.
 *
 * @param {object} httpOptions - HTTP request options:
 * https://nodejs.org/api/http.html#httprequestoptions-callback
 * @param {object} options - A subset of requester options.
 * @param {boolean} [options.insecureSSL = false] - Enable insecure SSL.
 * @param {boolean} [options.keepAlive = true] - Enable keep-alive.
 * @param {string} [options.proxy] - A proxy URL.
 */
function configureAgent(httpOptions, options) {
	const {
		_reqId: reqId,
		protocol
	} = httpOptions;

	const {
		proxy = process.env.HTTP_PROXY || '',
		insecureSSL = false
	} = options;

	// the API_BUILDER_KEEP_ALIVE environment variable can be used to
	// completely disable keep-alive in the product.
	let { keepAlive = true } = options;
	if (process.env.API_BUILDER_KEEP_ALIVE) {
		keepAlive = process.env.API_BUILDER_KEEP_ALIVE !== 'false';
	}

	log(reqId, 'configure agent', { keepAlive, insecureSSL });

	const agentOptions = {
		protocol: protocol.replace(/:$/, ''),
		rejectUnauthorized: !insecureSSL,
		requestCert: true
	};
	if (keepAlive) {
		agentOptions.keepAlive = true;
		agentOptions.keepAliveMsecs = 1000;
		agentOptions.maxSockets = 256;
		agentOptions.maxFreeSockets = 256;
	}

	const key = `${keepAlive}-${protocol}-${proxy}-${insecureSSL}`;

	let Agent;
	if (proxy) {
		Agent = ProxyAgent;
		const proxyUrl = new URL(proxy);
		agentOptions.protocol = proxyUrl.protocol.replace(':', '');
		agentOptions.hostname = proxyUrl.hostname;
		agentOptions.port = proxyUrl.port;
		log(reqId, 'need proxy agent', key, {
			key,
			protocol: agentOptions.protocol,
			hostname: protocol.hostname,
			port: protocol.port
		});
	} else {
		Agent = (protocol === 'https:') ? https.Agent : http.Agent;
		log(reqId, 'need agent', key);
	}

	if (!globalAgents[key]) {
		globalAgents[key] = new Agent(agentOptions);
	}
	delete httpOptions.proxy;
	httpOptions.agent = globalAgents[key];
}

function destroyAgents() {
	log('destroy keep-alive agents');
	for (const key in globalAgents) {
		if (key.startsWith('false-')) {
			// non-keepAlive, so do not need to destroy. destrying non-keepAlive
			// agents seems to screw the server for some reason. reproducible
			// with runtime unit-tests.
			continue;
		}
		log('destroying agent:', key);
		globalAgents[key].destroy();
		delete globalAgents[key];
	}
}

module.exports = {
	configureAgent,
	destroyAgents
};
