const contentTypeParser = require('content-type');
const iconv = require('iconv-lite');
const debug = require('debug');
const { isBuffer, isString } = require('./utils');

const log = debug('api-builder:request');

class Decoder {
	constructor() {
		this._decoders = [];
		this.register(/^application\/(.*\+)?json$/, decodeJSON);
		this.register(/^text\/.*$/, decodeText);
		this.register(/^application\/(.*\+)?xml$/, decodeText);
	}

	register(typeExpression, decode) {
		this._decoders.push({
			type: typeExpression,
			decode
		});
	}

	decode(buffer, contentType) {
		if (!contentType || !isString(contentType)) {
			log('ignore body; content-type is not a string:', contentType);
			return buffer;
		}
		if (!isBuffer(buffer)) {
			log('ignore body; expected a buffer');
			return buffer;
		}
		let parsed;
		try {
			parsed = contentTypeParser.parse(contentType);
		} catch (ex) {
			log('ignore body; failed to parse content-type', contentType, ex);
			return buffer;
		}
		const charset = getCharset(parsed);
		log('got charset:', charset);
		const options = { charset };
		for (const { type, decode } of this._decoders) {
			if (!parsed.type.match(type)) {
				continue;
			}
			if (!iconv.encodingExists(charset)) {
				log('ignore body; invalid charset:', charset);
				return buffer;
			}
			const decoded = decode(buffer, options);
			if (decoded !== undefined) {
				log('successfully decoded body:', buffer.length, 'bytes');
				return decoded;
			}
			log('failed to decode:', decode.name);
		}
		return buffer;
	}
}

/**
 * Gets the charset parameter from the parsed content-type header.  See:
 * https://www.npmjs.com/package/content-type
 * @param {object} parsed - The parsed content-type
 * @returns {string} The charset if it is specified as part of content type,
 * or utf-8 by default.
 */
function getCharset(parsed) {
	return (parsed.parameters && parsed.parameters.charset) || 'utf-8';
}

function decodeJSON(buffer, options) {
	log('decoding JSON');
	if (!buffer.length) {
		// RDPP-5622-5 says that an empty JSON body should decode as `null`
		return null;
	}
	const string = decodeText(buffer, options);
	return JSON.parse(string);
}

function decodeText(buffer, { charset }) {
	log('decoding text, charset:', charset);
	return iconv.decode(buffer, charset);
}

module.exports = Decoder;
