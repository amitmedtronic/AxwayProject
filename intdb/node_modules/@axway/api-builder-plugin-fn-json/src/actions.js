module.exports = {
	/**
	 * Stringify JSON.
	 *
	 * @param {object} params - A map of all the parameters passed from the flow.
	 * @param {object} options - The additional options provided from the flow
	 *	 engine.
	* @param {object} options.pluginConfig - The service configuration for this
	*	 plugin from API Builder config.pluginConfig['api-builder-plugin-pluginName']
	* @param {object} options.logger - The API Builder logger which can be used
	*	 to log messages to the console. When run in unit-tests, the messages are
	*	 not logged.  If you wish to test logging, you will need to create a
	*	 mocked logger (e.g. using `simple-mock`) and override in
	*	 `MockRuntime.loadPlugin`.  For more information about the logger, see:
	*	 https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/project/logging/index.html
	* @param {*} [options.pluginContext] - The data provided by passing the
	*	 context to `sdk.load(file, actions, { pluginContext })` in `getPlugin`
	*	 in `index.js`.
	* @return {*} The response value (resolves to "next" output, or if the method
	*	 does not define "next", the first defined output).
	*/
	stringify(params) {
		return JSON.stringify(params.value, null, params.space || 0);
	},
	/**
	 * Parse JSON.
	 *
	 * @param {object} params - A map of all the parameters passed from the flow.
	 * @param {object} options - The additional options provided from the flow
	 *	 engine.
	* @param {object} options.pluginConfig - The service configuration for this
	*	 plugin from API Builder config.pluginConfig['api-builder-plugin-pluginName']
	* @param {object} options.logger - The API Builder logger which can be used
	*	 to log messages to the console. When run in unit-tests, the messages are
	*	 not logged.  If you wish to test logging, you will need to create a
	*	 mocked logger (e.g. using `simple-mock`) and override in
	*	 `MockRuntime.loadPlugin`.  For more information about the logger, see:
	*	 https://docs.axway.com/bundle/api-builder/page/docs/developer_guide/project/logging/index.html
	* @param {*} [options.pluginContext] - The data provided by passing the
	*	 context to `sdk.load(file, actions, { pluginContext })` in `getPlugin`
	*	 in `index.js`.
	* @return {*} The response value (resolves to "next" output, or if the method
	*	 does not define "next", the first defined output).
	*/
	parse(params) {
		return JSON.parse(params.json);
	}
};
