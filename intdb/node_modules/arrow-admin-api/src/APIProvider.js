const {
	BadRequestError,
	ForbiddenError,
	NotFoundError,
	PayloadTooLargeError,
	InternalServerError
} = require('./errors');

const ERROR_MAP = {
	400: BadRequestError,
	403: ForbiddenError,
	404: NotFoundError,
	413: PayloadTooLargeError,
	500: InternalServerError
};

class APIProvider {
	constructor() {
		throw new Error('Derived instances must use static.');
	}

	static handleError(ex, res, ...errorCodes) {
		let status = 500;
		let content;
		for (const errorCode of errorCodes) {
			if (!ERROR_MAP.hasOwnProperty(errorCode)) {
				// eslint-disable-next-line no-console
				console.error('APIProvider.handleError does not define code:', errorCode);
			} else if (ex instanceof ERROR_MAP[errorCode]) {
				status = errorCode;
				content = ex.message;
				break;
			}
		}

		// firefox has a problem with no content being set when the code is not 204/304
		res.status(status).send(content || `${status} Error`);

		if (status >= 500) {
			// eslint-disable-next-line no-console
			console.error('Unexpected error:', ex);
		}
	}
}

module.exports = APIProvider;
