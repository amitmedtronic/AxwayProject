/**
 * The API Builder server status.
 * @public
 */
class SystemStatus {
	/**
	 * Create a SystemStatus.
	 *
	 * @param {string} statusMessage - The status message.
	 * @param {string} unavailableMessage - The message when the system is
	 * unavailable/unstable.
	 */
	constructor(statusMessage, unavailableMessage = null) {
		this.statusMessage = statusMessage;
		if (unavailableMessage) {
			this.unavailableMessage = unavailableMessage;
		}
		if (!SystemStatus.validate(this)) {
			throw new Error('Invalid system status.');
		}
	}

	/**
	 * The swagger schema for a SystemConfig.
	 * @return {object} - The schema for a SystemConfig.
	 */
	static get schema() {
		return {
			title: 'System Status',
			type: 'object',
			properties: {
				statusMessage: {
					type: 'string'
				},
				unavailableMessage: {
					type: 'string'
				}
			},
			required: [
				'statusMessage'
			]
		};
	}

	/**
	 * Validate that object is a SystemStatus.
	 * @param {SystemStatus|object} obj - The object to validate.
	 * @return {boolean} - true if the object is a valid SystemStatus.
	 */
	static validate(obj) {
		let valid = true;
		SystemStatus.schema.required.forEach(prop => {
			if (!obj.hasOwnProperty(prop)) {
				valid = valid && false;
			} else {
				valid = valid && (obj[prop] !== undefined);
			}
		});

		return valid;
	}
}

module.exports = SystemStatus;
