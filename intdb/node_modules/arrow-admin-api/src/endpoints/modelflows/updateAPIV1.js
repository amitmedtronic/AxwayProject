const { getShortName } = require('../util');

const updateAPI = (name, schemaRef, model, options) => ({
	schemaVersion: '4',
	info: {
		name,
		description: `Update ${model.name}`
	},
	parameter: {
		properties: {
			...(options.withParams && {
				params: {
					type: 'object',
					description: 'The parameters from the endpoint.',
					properties: {
						[model.getPrimaryKeyName()]: {
							description: `The ${model.name} ID`,
							type: schemaRef.pkType
						},
						data: {
							description: 'Update body',
							$ref: schemaRef.model
						}
					},
					required: [
						model.getPrimaryKeyName(),
						'data'
					]
				}
			}),
			request: {
				type: 'object',
				description: 'The HTTP request.'
			},
			config: {
				type: 'object',
				description: 'The service\'s configuration'
			},
			env: {
				type: 'object',
				description: 'The host OS environment'
			}
		},
		additionalProperties: false,
		required: [
			...(options.withParams ? [ 'params' ] : []),
			'request',
			'config',
			'env'
		]
	},
	start: 'model.update',
	nodes: {
		'model.update': {
			type: `nodehandler://api-builder-flow-invoke/model/${model.name}`,
			method: 'update',
			name: `Update ${getShortName(model)}`,
			parameters: [
				{
					name: `${model.getPrimaryKeyName()}`,
					value: `$.${options.withParams
						? 'params' : 'request.path'}.${model.getPrimaryKeyName()}`
				},
				{
					name: 'data',
					value: `$.${options.withParams ? 'params.data' : 'request.body'}`
				}
			],
			outputs: {
				next: {
					context: '$.model',
					routes: [ 'response.success' ]
				},
				notfound: {
					routes: [ 'response.error.notfound' ]
				}
			}
		},
		'response.success': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set success response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '204',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		},
		'response.error.notfound': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set not found response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '404',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		}
	}
});

module.exports = updateAPI;
