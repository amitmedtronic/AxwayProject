const { getShortName } = require('../util');
const { arrowQueryParameter } = require('../../util');

const findAndModifyAPI = (name, schemaRef, model, options) => ({
	schemaVersion: '4',
	info: {
		name,
		description: `Find and modify ${model.name}`
	},
	parameter: {
		properties: {
			...(options.withParams && {
				params: {
					type: 'object',
					description: 'The parameters from the endpoint.',
					properties: {
						...arrowQueryParameter,
						data: {
							$ref: schemaRef.model,
							description: `The ${model.name} to use for the update.`
						},
						// while these parameters are on the model API but
						// over-complicate the generated endpoint.  we seem to
						// model the mongodb find and modify function. we should
						// consider removing them from the endpoint.
						new: {
							type: 'boolean',
							default: false,
							description: 'Set to true to return the new model instead of the original model.'
						},
						upsert: {
							type: 'boolean',
							default: false,
							description: 'Set to true to allow the method to create a new model.'
						}
					},
					required: [
						'data'
					]
				}
			}),
			request: {
				type: 'object',
				description: 'The HTTP request.'
			},
			config: {
				type: 'object',
				description: 'The service\'s configuration'
			},
			env: {
				type: 'object',
				description: 'The host OS environment'
			}
		},
		additionalProperties: false,
		required: [
			...(options.withParams ? [ 'params' ] : []),
			'request',
			'config',
			'env'
		]
	},
	start: 'params.buildargs.1',
	nodes: {
		'params.buildargs.1': {
			type: 'nodehandler://axway-flow/setcontext',
			method: 'setcontext',
			name: 'Build args parameter (new)',
			parameters: [
				{
					name: 'value',
					value: `$.${options.withParams ? 'params' : 'request.query'}.new`
				}
			],
			outputs: {
				next: {
					context: '$.upsertArgs.new',
					routes: [ 'params.buildargs.2' ]
				}
			}
		},
		'params.buildargs.2': {
			type: 'nodehandler://axway-flow/setcontext',
			method: 'setcontext',
			name: 'Build args parameter (upsert)',
			parameters: [
				{
					name: 'value',
					value: `$.${options.withParams ? 'params' : 'request.query'}.upsert`
				}
			],
			outputs: {
				next: {
					context: '$.upsertArgs.upsert',
					routes: [ 'model.findAndModify' ]
				}
			}
		},
		'model.findAndModify': {
			type: `nodehandler://api-builder-flow-invoke/model/${model.name}`,
			method: 'findAndModify',
			name: `Find and modify ${getShortName(model)}`,
			parameters: [
				{
					name: 'data',
					value: `$.${options.withParams ? 'params.data' : 'request.body'}`
				},
				{
					name: 'args',
					value: '$.upsertArgs'
				},
				{
					name: 'limit',
					value: `$.${options.withParams ? 'params' : 'request.query'}.limit`
				},
				{
					name: 'skip',
					value: `$.${options.withParams ? 'params' : 'request.query'}.skip`
				},
				{
					name: 'where',
					value: `$.${options.withParams ? 'params' : 'request.query'}.where`
				},
				{
					name: 'order',
					value: `$.${options.withParams ? 'params' : 'request.query'}.order`
				},
				{
					name: 'sel',
					value: `$.${options.withParams ? 'params' : 'request.query'}.sel`
				},
				{
					name: 'unsel',
					value: `$.${options.withParams ? 'params' : 'request.query'}.unsel`
				}
			],
			outputs: {
				next: {
					context: '$.model',
					routes: [ 'response.success' ]
				},
				notfound: {
					routes: [ 'response.error.notfound' ]
				}
			}
		},
		'response.success': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '204',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		},
		'response.error.notfound': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set not found response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '404',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		}
	}
});

module.exports = findAndModifyAPI;
