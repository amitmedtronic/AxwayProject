const { getShortName } = require('../util');
const { arrowQueryParameter } = require('../../util');

// distinct is slightly different
const distinctQueryParameter = Object.assign({}, arrowQueryParameter);
delete distinctQueryParameter.sel;
delete distinctQueryParameter.unsel;

const distinctAPI = (name, schemaRef, model, options) => ({
	schemaVersion: '4',
	info: {
		name,
		description: `Get distinct records of ${model.name}`
	},
	parameter: {
		properties: {
			...(options.withParams && {
				params: {
					type: 'object',
					description: 'The parameters from the endpoint.',
					properties: {
						...distinctQueryParameter,
						field: {
							type: 'string',
							description: 'The field name that must be distinct.'
						}
					},
					required: [
						'field'
					]
				}
			}),
			request: {
				type: 'object',
				description: 'The HTTP request.'
			},
			config: {
				type: 'object',
				description: 'The service\'s configuration'
			},
			env: {
				type: 'object',
				description: 'The host OS environment'
			}
		},
		additionalProperties: false,
		required: [
			...(options.withParams ? [ 'params' ] : []),
			'request',
			'config',
			'env'
		]
	},
	start: 'model.distinct',
	nodes: {
		'model.distinct': {
			type: `nodehandler://api-builder-flow-invoke/model/${model.name}`,
			method: 'distinct',
			name: `Find distinct ${getShortName(model, true)}`,
			parameters: [
				{
					name: 'limit',
					value: `$.${options.withParams ? 'params' : 'request.query'}.limit`
				},
				{
					name: 'skip',
					value: `$.${options.withParams ? 'params' : 'request.query'}.skip`
				},
				{
					name: 'where',
					value: `$.${options.withParams ? 'params' : 'request.query'}.where`
				},
				{
					name: 'order',
					value: `$.${options.withParams ? 'params' : 'request.query'}.order`
				},
				{
					name: 'field',
					value: `$.${options.withParams ? 'params' : 'request.path'}.field`
				}
			],
			outputs: {
				next: {
					context: '$.models',
					routes: [ 'response.success' ]
				}
			}
		},
		'response.success': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '200',
					type: 'number'
				},
				{
					name: 'body',
					value: '$.models'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		}
	}
});

module.exports = distinctAPI;
