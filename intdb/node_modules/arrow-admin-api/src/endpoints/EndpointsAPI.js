const strictUriEncode = require('strict-uri-encode');
const APIProvider = require('../APIProvider');
const Endpoints = require('./schema/Endpoints');
const APISpecType = require('./schema/APISpecType');
const GroupSummary = require('../api/schema/GroupSummary');
const Status = require('../api/schema/Status');

/**
 * API for interacting with the Endpoints.
 * @public
 */
class EndpointsAPI extends APIProvider {
	/**
     * Bind the paths to the controller methods.
     *
     * @param {EndpointsController} controller - The main controller providing the
     *                                         implementation for this API.
     */
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		// https://techweb.axway.com/jira/browse/RDPP-2086
		// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
		// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
		// This means that it is not possible to represent our flow schema in a Swagger 2.0
		// document because we use things like (oneOf, allOf).  The only choice here is to
		// upgrade to use Swagger 3.0, which allegedly supports them
		// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
		// When fixed, replace with:
		const flowschema = {
			// $ref: 'http://axway.com/schemas/flowschema.json#/flow-schema'
			type: 'object'
		};

		swagger
			.schema('Status', Status.schema)
			.schema('Endpoints', Endpoints.schema)
			.schema('GroupSummary', GroupSummary.schema)
			.schema('ApiSpecType', APISpecType.schema)
			.schema('LoadedApiSpec', {
				type: 'object',
				properties: {
					parsedSpec: {},
					valid: {
						type: 'boolean'
					}
				},
				required: [ 'valid' ]
			});

		swagger
			// loadAPISpec
			.put('/endpoints/validate')
			.operationId('loadAPISpec')
			.tag('endpoint')
			.summary('Load, validate, and return API spec.')
			.consumes('multipart/form-data')
			.parameter({
				in: 'formData',
				name: 'file',
				description: 'File to load',
				type: 'file'
			})
			.parameter({
				in: 'formData',
				name: 'url',
				description: 'URL to file to load',
				type: 'string'
			})
			.parameter({
				in: 'query',
				name: 'type',
				description: 'Type of API specification',
				type: 'string'
			})
			.response(200, 'Loading API spec completed', 'LoadedApiSpec')
			.response(400)
			.response(413)
			.response(500)
			.action(async (req, res) => {
				try {
					const spec = await controller
						.loadAPISpec(req.fields, req.files, req.query.type);
					res.setHeader('Connection', 'close');
					res.status(200).send(spec);
				} catch (err) {
					APIProvider.handleError(err, res, 400, 413, 500);
				}
			});

		swagger
			// createAPISpec
			.post('/endpoints')
			.operationId('createAPISpec')
			.tag('endpoint')
			.tag('reloads')
			.summary('Save validated API specification taken from the cache. Requires /endpoints/validate to be called first.')
			.parameter({
				in: 'query',
				name: 'mock',
				type: 'boolean',
				description: 'Enable mocking'
			}, {
				in: 'query',
				name: 'type',
				type: 'string',
				description: 'Type of API spec to create.'
			}, {
				in: 'query',
				name: 'specId',
				type: 'string',
				description: 'The unique spec identifier, used for updating existing spec.'
			})
			.response(201, 'API specification was saved.', null, null, {
				Location: {
					description: 'The id of the newly created document',
					type: 'string'
				}
			})
			.response(400)
			.response(500)
			.action(async (req, res) => {
				try {
					const id = await controller.createAPISpec({
						type: req.query.type,
						mock: req.query.mock === 'true',
						specId: req.query.specId
					});
					res.setHeader('Location', id);
					res.status(201).send();
					controller.ctx.apibuilder.emit('reload');
				} catch (err) {
					APIProvider.handleError(err, res, 400, 500);
				}
			});

		swagger
			// getAPISpecTypes
			.get('/endpoints/types')
			.operationId('getAPISpecTypes')
			.tag('endpoint')
			.summary('Get all the registered api-first types')
			.response(200, 'fetched ApiSpecTypes', 'ApiSpecType', true)
			.response(500)
			.action(async (req, res) => {
				try {
					const types = await controller.getAPISpecTypes();
					res.status(200).send(types);
				} catch (err) {
					APIProvider.handleError(err, res, 500);
				}
			});

		swagger
			.delete('/endpoints/:type')
			.operationId('deleteSpec')
			.tag('endpoint')
			.tag('reloads')
			.summary('Deletes a type of spec with all its associated flows and triggers')
			.parameter({
				in: 'path',
				name: 'type',
				type: 'string',
				description: 'The unique type of spec to delete.',
				required: true
			})
			.response(204, 'No content')
			.response(404)
			.response(500)
			.action(async (req, res) => {
				const specType = decodeURIComponent(req.params.type);
				try {
					await controller.deleteSpec(specType);
					res.status(204).send();
					controller.ctx.apibuilder.emit('reload');
				} catch (err) {
					APIProvider.handleError(err, res, 404, 500);
					return;
				}
			});

		swagger
			.post('/endpoints/generate')
			.operationId('generateEndpoint')
			.tag('endpoint')
			.tag('reloads')
			.summary('Generate an endpoint.')
			.parameter({
				in: 'body',
				name: 'endpoint',
				schema: {
					type: 'object',
					properties: {
						model: {
							type: 'string'
						},
						name: {
							type: 'string',
							description: 'The name for the endpoint.'
						},
						description: {
							type: 'string'
						}
					}
				},
				description: 'Information for endpoint generation.',
				required: true
			})
			.response(201, 'Endpoint was created.', null, null, {
				Location: {
					description: 'The endpointId to the newly created endpoint.',
					type: 'string'
				}
			})
			.response(403)
			.response(404)
			.response(500)
			.action(
				(req, res) => {
					controller.generateEndpoints(req.body)
						.then(
							result => {
								res.setHeader('Location', result);
								res.status(201).send();
								controller.ctx.apibuilder.emit('reload');
							}
						)
						.catch(err => {
							APIProvider.handleError(err, res, 404, 500);
						});
				});

		swagger
			.get('/endpoints/summary')
			.operationId('getEndpointSummaries')
			.tag('endpoint')
			.summary('Gets an array of Endpoint summaries.')
			.response(200, 'OK', 'GroupSummary')
			.response(500)
			.action(async (req, res) => {
				const opts = {};
				try {
					const summaries = await controller.getEndpointSummaries(opts);
					res.status(200).send(summaries);
				} catch (err) {
					APIProvider.handleError(err, res, 500);
				}
			});

		swagger
			.get('/endpoints/:group')
			.operationId('getEndpoints')
			.tag('endpoint')
			.summary('Gets an array of Endpoints.')
			.parameter({ in: 'path', name: 'group', type: 'string', description: 'API endpoint group to retrieve.' })
			.response(200, 'OK', 'Endpoints')
			.response(404)
			.response(500)
			.action((req, res) => {
				controller.getEndpoints(req.params.group)
					.then(APIs => {
						res.status(200).send(APIs);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 404, 500);
					});
			});

		swagger
			.delete('/endpoints/:group/endpoint')
			.operationId('deleteEndpoint')
			.tag('endpoint')
			.tag('reloads')
			.summary('Deletes an endpoint from an API group')
			.parameter({
				name: 'group',
				in: 'path',
				type: 'string',
				description: 'The API group name.',
				required: true
			})
			.parameter({
				name: 'endpoint',
				in: 'body',
				schema: {
					type: 'object',
					properties: {
						path: {
							type: 'string',
							description: 'The specified path to delete from.'
						},
						method: {
							type: 'string',
							description: 'The HTTP verb to delete.'
						}
					}
				},
				description: 'The API path to delete a method from.',
				required: true
			})
			.response(204, 'No Content')
			.response(404)
			.response(400)
			.response(500)
			.action((req, res) => {
				const data = {
					...req.body
				};
				if (req.params.group) {
					data.group = req.params.group;
				}
				controller.deleteEndpoint(data)
					.then(() => {
						res.status(204).send();
						controller.ctx.apibuilder.emit('reload');
					})
					.catch(err => {
						APIProvider.handleError(err, res, 404, 400, 500);
					});
			});

		swagger
			.post('/endpoints/:group/flow')
			.operationId('bindFlow')
			.tag('endpoint')
			.tag('reloads')
			.summary('Binds a flow to an endpoint.  The flow will be created and the `flowId` will be calculated by using the `operationId` of the endpoint, or by generating a unique id from the endpoint.  If a flow exists with the same `flowId`, the operation will return 403.')
			.parameter({
				name: 'group',
				in: 'path',
				type: 'string',
				description: 'The API group name.',
				required: true
			})
			.parameter({
				name: 'bind',
				in: 'body',
				schema: {
					type: 'object',
					properties: {
						path: {
							type: 'string',
							description: 'The specified path to bind.'
						},
						method: {
							type: 'string',
							description: 'The HTTP verb to bind.'
						},
						flow: {
							...flowschema,
							description: 'The flow to create.'
						}
					}
				},
				description: 'The Swagger method and path to bind to a flow.',
				required: true
			})
			.response(201, 'Flow successfully created and bound to endpoint', null, null, {
				Location: {
					description: 'The flowId to the newly created flow.',
					type: 'string'
				}
			})
			.response(400)
			.response(403, 'Forbidden (flow already exists)')
			.response(404)
			.response(500)
			.action((req, res) => {
				const data = {
					...req.body,
					group: req.params.group
				};

				controller.bindFlow(data)
					.then((flowId) => {
						const encodedId = strictUriEncode(flowId);
						res.setHeader('Location', encodedId);
						res.status(201).send();
						controller.ctx.apibuilder.emit('reload');
					})
					.catch(err => {
						APIProvider.handleError(err, res, 400, 403, 404, 500);
					});
			});
	}
}

module.exports = EndpointsAPI;
