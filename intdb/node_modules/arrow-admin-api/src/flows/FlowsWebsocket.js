const errorRegex = /(\$\.params.*) \(\{/;
class FlowsWebsocket {
	/**
	 * @param {object} ctx - The api context
	 */
	constructor(ctx) {
		this.ctx = ctx;
	}

	bind() {
		const { app, prefix } = this.ctx;

		app.ws(`${prefix}/flows/debug`, (ws, req) => {
			req.logger.trace('Started flow debug session');
			ws.on('start', async data => {
				try {
					if (!data) {
						throw new Error('\'start\' message event must be sent with \'flow\' and \'params\'');
					}
					await this._startDebugging(
						data.flow, data.params, ws, req, data.options);
				} catch (e) {
					this._sendError(e, ws, req);
				}
			});
		});
	}

	_formatError(e) {
		// Figure out the type of error
		// There's validation errors  { valid: false, errors: [...] } and Error objects
		let msg;
		if (e.errors) {
			msg = e.errors.map(error => {
				if (typeof error === 'string') {
					const match = errorRegex.exec(error);
					return match && match[1] || error;
				} else {
					return JSON.stringify(error, null, 2);
				}
			}).join('\n');
			return new Error(msg);
		} else {
			return e;
		}
	}

	_sendError(e, ws, req) {
		req.logger.trace('Error during debug');
		req.logger.trace(e);

		const err = this._formatError(e);

		// error event
		ws.sendData('error', err.message);
		ws.close();
	}

	/**
	 * @param {Object} flow - flow definition.
	 * @param {Object} params - parameters for the flow.
	 * @param {WebSocket} ws - websocket from request.
	 * @param {Object} req - request from request.
	 * @param {Object} options - options for the debugger.
	 * @param {boolean} options.allParamsProvided - If true will denote that
	 * the 'params' argument contains all the parameters and the Flow will be
	 * invoked with 'params'. Otherwise the flow will be invoked with params plus
	 * what we have in environment, config, and request.
	 */
	async _startDebugging(flow, params, ws, req, options = {}) {
		const { apibuilder } = this.ctx;
		const flowId = req.getId();
		const dbgr = await apibuilder.flowManager.createFlow(flowId, flow);
		// bind events
		dbgr.on('start', () => {
			req.logger.debug(`Flow invoked by debugger: ${flow.info.name}`);
			ws.sendData('start');
		});
		// start flow
		let input;
		if (options.allParamsProvided) {
			input = params;
		} else {
			input = {
				params,
				env: process.env,
				request: req,
				config: apibuilder.config
			};
		}
		req.logger.trace(input);
		const response = await dbgr.invoke(input, { logger: req.logger });
		req.logger.debug(`Flow debugging completed: ${flow.info.name}`);
		// end event
		ws.sendData('respond', response);
		ws.close();
	}
}

module.exports = FlowsWebsocket;
