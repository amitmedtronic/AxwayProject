const
	pkg = require('../package.json'),
	Swagger = require('openapi-doc'),
	uriUtils = require('@axway/api-builder-uri-utils'),
	nocache = require('nocache'),
	APIsAPI = require('./api/APIsAPI'),
	APIsController = require('./api/APIsController'),
	CodeblocksAPI = require('./codeblocks/CodeblocksAPI'),
	CodeblocksController = require('./codeblocks/CodeblocksController'),
	ConfigurationAPI = require('./config/ConfigurationAPI'),
	ConfigurationController = require('./config/ConfigurationController'),
	ConnectorsAPI = require('./connectors/ConnectorsAPI'),
	ConnectorsController = require('./connectors/ConnectorsController'),
	ComponentsAPI = require('./components/ComponentsAPI'),
	ComponentsController = require('./components/ComponentsController'),
	CredentialsAPI = require('./authorization/CredentialsAPI'),
	CredentialsController = require('./authorization/CredentialsController'),
	EndpointsAPI = require('./endpoints/EndpointsAPI'),
	EndpointsController = require('./endpoints/EndpointsController'),
	FlowsAPI = require('./flows/FlowsAPI'),
	FlowsController = require('./flows/FlowsController'),
	FlowsWebsocket = require('./flows/FlowsWebsocket'),
	ModelsAPI = require('./models/ModelsAPI'),
	ModelsController = require('./models/ModelsController'),
	ProjectAPI = require('./project/ProjectAPI'),
	ProjectController = require('./project/ProjectController'),
	SchemaAPI = require('./schema/SchemaAPI'),
	SchemaController = require('./schema/SchemaController'),
	SystemAPI = require('./system/SystemAPI'),
	SystemController = require('./system/SystemController'),
	SystemWebsocket = require('./system/SystemWebsocket'),
	TestAPI = require('./testapi/TestAPI'),
	TestController = require('./testapi/TestController'),
	NodehandlersAPI = require('./nodehandlers/NodehandlersAPI'),
	NodehandlersController = require('./nodehandlers/NodehandlersController'),
	TriggersAPI = require('./triggers/TriggersAPI'),
	TriggersController = require('./triggers/TriggersController'),
	{ ConcurrencyMiddleware } = require('./util'),
	ws = require('./websockets');

function configure(app, prefix, apibuilder, swagger) {
	apibuilder.logger.trace('Configuring Console API, prefix:', prefix);

	swagger = swagger || new Swagger();

	swagger
		.info(
			pkg.name,
			pkg.version,
			pkg.description
		)
		.basePath(prefix)
		.globalProduces('application/json')
		.globalConsumes('application/json');

	const ctx = {
		app,
		prefix,
		apibuilder,
		swagger
	};

	const flowsController = new FlowsController(ctx);
	const componentsController = new ComponentsController(ctx);

	// define swagger API for all endpoints
	APIsAPI.bind(new APIsController(ctx), ctx);
	CodeblocksAPI.bind(new CodeblocksController(ctx), ctx);
	ConfigurationAPI.bind(new ConfigurationController(ctx), ctx);
	ConnectorsAPI.bind(new ConnectorsController(ctx), ctx);
	ComponentsAPI.bind(componentsController, ctx);
	CredentialsAPI.bind(new CredentialsController(ctx), ctx);
	EndpointsAPI.bind(new EndpointsController(ctx, { flowsController }), ctx);
	FlowsAPI.bind(flowsController, ctx);
	ModelsAPI.bind(new ModelsController(ctx), ctx);
	ProjectAPI.bind(new ProjectController(ctx), ctx);
	SchemaAPI.bind(new SchemaController(ctx), ctx);
	SystemAPI.bind(new SystemController(ctx), ctx);
	TestAPI.bind(new TestController(ctx), ctx);
	NodehandlersAPI.bind(new NodehandlersController(ctx), ctx);
	TriggersAPI.bind(new TriggersController(ctx), ctx);

	if (!app) {
		return;
	}

	const concurrency = new ConcurrencyMiddleware();

	// Set up websocket handlers
	ws(app);
	new FlowsWebsocket(ctx).bind();
	new SystemWebsocket(ctx, { componentsController }).bind();

	// bind swagger APIs
	Swagger.forEachAction(swagger, (verb, operationPath) => {
		try {
			const endpoint = uriUtils.oasPathToExpress(prefix + operationPath);
			apibuilder.logger.trace(`binding admin api (${verb}) ${endpoint}`);
			const doc = swagger.apidoc();
			app[verb](
				endpoint,
				nocache(),
				concurrency.getMiddleware(doc, verb, operationPath),
				Swagger.securityMiddleware(swagger, verb, operationPath),
				Swagger.actionMiddleware(swagger, verb, operationPath)
			);
		} catch (ex) {
			apibuilder.logger.error(ex);
		}
	});

	apibuilder.logger.trace('Configured API Builder Console API');
}

module.exports = {
	configure
};
